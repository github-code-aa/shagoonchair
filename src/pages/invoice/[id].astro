---
import Layout from "../../layouts/Layout.astro";
import { AUTH_CONFIG } from "../../config/auth.js";

// Get the ID from the URL parameter
const { id } = Astro.params;

const companyInfo = {
  name: "SHAGOON SEATING CHAIR",
  subtitle: "(MFG. OF EXCLUSIVE CHAIR, SOFA, S.S POWDER COATED FURNITURE)",
  address:
    "GALA NO.07, KAUSHALYA RAMKARAN KEVET CHAWL, NEAR PRAVASI INDUSTRIAL ESTATE, 2ND MARK DORIAN ESTATE, MULUND LINK ROAD, GOREGAON EAST, MUMBAI-400063, MAHARASHTRA",
  phone: "+91 9867071332/9769956235",
  email: "shagoonchair@gmail.com",
  gst_number: "27ASQPG8588M1ZO",
  pan_number: "ASQPG8588M",
  state_code: "27",
};
---

<Layout title="Invoice View - Shagoon Chair">
  <main>
    <!-- Print Controls (hidden when printing) -->
    <div class="invoice-controls no-print">
      <h1>üìÑ Invoice View</h1>
      <div class="button-group">
        <button onclick="window.print()" class="btn btn-primary"
          >üñ®Ô∏è Print Invoice</button
        >

        <a href="/bills" class="btn btn-outline">‚Üê Back to Bills</a>
        <button onclick="logout()" class="btn btn-danger">üö™ Logout</button>
      </div>
    </div>

    <!-- Loading State -->
    <div id="loadingState" class="loading-container no-print">
      <div class="spinner"></div>
      <p>Loading invoice...</p>
    </div>

    <!-- Error State -->
    <div
      id="errorState"
      class="error-container no-print"
      style="display: none;"
    >
      <div class="error-message">
        <h4>‚ö†Ô∏è Error Loading Invoice</h4>
        <p id="errorMessage">Failed to load invoice. Please try again.</p>
        <button onclick="loadInvoiceData()" class="btn btn-primary"
          >üîÑ Retry</button
        >
      </div>
    </div>

    <!-- Invoice Content -->
    <div id="invoiceContent" class="invoice-wrapper" style="display: none;">
      <div class="invoice-document">
        <!-- Company Header -->
        <div class="company-header">
          <div class="company-logo">
            <img
              src="/logo.jpeg"
              alt="Shagoon Seating Chair Logo"
              class="logo-image"
            />
          </div>
          <div class="company-info">
            <h1 class="company-name">{companyInfo.name}</h1>
            <p class="company-subtitle">{companyInfo.subtitle}</p>
            <p class="company-address">{companyInfo.address}</p>
            <p class="company-contact">
              Ph.: MOB.: {companyInfo.phone}, Email: {companyInfo.email}
            </p>
          </div>
          <div class="document-type">
            <span contenteditable="">ORIGINAL / DUPLICATE / EXTRA</span>
          </div>
        </div>

        <!-- Invoice Details -->
        <div class="invoice-header">
          <div class="customer-section">
            <h3>To,</h3>
            <div id="customerInfo">
              <!-- Customer info will be populated here -->
            </div>
          </div>

          <div class="invoice-meta">
            <table class="meta-table">
              <tr>
                <td><strong>INVOICE No:</strong></td>
                <td id="invoiceNumber">-</td>
                <td><strong>Date:</strong></td>
                <td id="invoiceDate">-</td>
              </tr>
              <tr>
                <td><strong>CHALLAN No.</strong></td>
                <td id="challanNumber">-</td>
                <td><strong>Date:</strong></td>
                <td id="challanDate">-</td>
              </tr>
              <tr>
                <td><strong>P.O. No.</strong></td>
                <td id="poNumber">-</td>
                <td><strong>Date:</strong></td>
                <td id="poDate">-</td>
              </tr>
            </table>

            <div class="dispatch-section">
              <p>
                <strong>DISPATCH DETAILS:</strong>
                <span id="dispatchDetails">-</span>
              </p>
            </div>
          </div>
        </div>

        <!-- Vendor and HSN Info -->
        <div class="vendor-hsn-section">
          <div class="vendor-info">
            <strong>VENDOR CODE:</strong>
            <span id="vendorCode">*****</span>
          </div>
          <div class="hsn-info">
            <strong>HSN CODE:</strong>
            <span id="hsnCode">-</span>
          </div>
        </div>

        <!-- Items Table -->
        <div class="items-section">
          <table class="items-table">
            <thead>
              <tr>
                <th class="sr-col">SR.</th>
                <th class="desc-col">DESCRIPTION</th>
                <th class="price-col">UNIT PRICE</th>
                <th class="qty-col">QTY</th>
                <th class="amount-col">AMOUNT</th>
              </tr>
            </thead>
            <tbody id="itemsTableBody">
              <!-- Items and tax calculations will be populated here -->
            </tbody>
          </table>
          <p class="amount-words">
            <strong>TOTAL:</strong>
            <span id="amountInWords">-</span>
          </p>
        </div>

        <!-- Bank Details and Terms & Conditions -->
        <div class="bank-section">
          <table class="bank-terms-table">
            <tr>
              <td class="bank-details-cell">
                <p>
                  <strong>Bank Name:</strong>
                  <span id="bankName">-</span>
                </p>
                <p>
                  <strong>Bank A/c:</strong>
                  <span id="bankAccount">-</span>
                </p>
                <p>
                  <strong>Bank Branch:</strong>
                  <span id="bankBranch">-</span>
                </p>
                <p>
                  <strong>Bank IFSC:</strong>
                  <span id="bankIFSC">-</span>
                </p>
                <p>
                  <strong>Type of A/C:</strong>
                  <span id="bankAccountType">-</span>
                </p>
              </td>
              <td class="terms-details-cell">
                <p><strong>TERM AND CONDITION</strong></p>
                <div id="termsContent">
                  <!-- Terms will be populated here -->
                </div>
              </td>
            </tr>
          </table>
        </div>

        <!-- Footer -->
        <div class="invoice-footer">
          <div class="gst-info">
            <p>
              <strong>GST No.:</strong>
              <strong>{companyInfo.gst_number}</strong>
            </p>
            <p>
              <strong>PAN NO.:</strong>
              <strong>{companyInfo.pan_number}</strong>
            </p>
          </div>

          <div class="signature-section">
            <p>For <strong>SHAGOON SEATING CHAIR</strong></p>
            <div class="signature-space"></div>
            <p><strong>PROPRIETOR</strong></p>
          </div>
        </div>

        <!-- Payment Terms -->
        <div class="payment-terms">
          <p>
            <strong
              >PAYMENT ONLY BY CROSSED CHEQUES / DD PAYABLE IN MUMBAI</strong
            >
          </p>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  /* No Print Styles */
  @media print {
    .no-print {
      display: none !important;
    }

    * {
      -webkit-print-color-adjust: exact !important;
      color-adjust: exact !important;
      print-color-adjust: exact !important;
    }

    @page {
      size: A4 portrait;
      margin: 0;
    }

    body {
      margin: 0;
      padding: 0;
      width: 210mm;
      height: 297mm;
    }

    .invoice-wrapper {
      margin: 0 !important;
      padding: 0 !important;
      box-shadow: none !important;
      border-radius: 0 !important;
      width: 210mm !important;
      min-height: 297mm !important;
    }

    .invoice-document {
      padding: 5mm !important;
      box-sizing: border-box !important;
      font-size: 8px !important;
      line-height: 1.2 !important;
    }

    .company-header {
      margin-bottom: 10px !important;
    }

    .company-name {
      font-size: 16px !important;
    }

    .invoice-header {
      margin: 10px 0 !important;
      gap: 10px !important;
    }

    .items-section {
      min-height: 150mm !important;
    }

    .items-table tbody tr {
      height: 13px !important;
      max-height: 13px !important;
      font-size: 8px !important;
    }

    .items-table th,
    .items-table td {
      font-size: 10px !important;
      padding: 3px 4px !important;
      border: 0.5px solid #666 !important;
      font-weight: 600 !important;
    }

    .customer-section {
      padding: 8px 10px !important;
      box-shadow: none !important;
    }

    .customer-section hr {
      margin: 3px 0 !important;
      border-color: #ddd !important;
    }
  }

  /* General Styles */
  .invoice-controls {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .invoice-controls h1 {
    margin: 0;
    color: #2c3e50;
  }

  .button-group {
    display: flex;
    gap: 10px;
  }

  .btn {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    text-decoration: none;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 8px;
  }

  .btn-primary {
    background: #3498db;
    color: white;
  }
  .btn-secondary {
    background: #95a5a6;
    color: white;
  }
  .btn-outline {
    background: transparent;
    color: #2c3e50;
    border: 1px solid #2c3e50;
  }
  .btn-danger {
    background: #e74c3c;
    color: white;
  }

  .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  /* Loading and Error States */
  .loading-container,
  .error-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 400px;
    background: white;
    padding: 40px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    text-align: center;
  }

  .spinner {
    width: 50px;
    height: 50px;
    border: 5px solid #f3f3f3;
    border-top: 5px solid #3498db;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 20px;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* Invoice Document Styles */
  .invoice-wrapper {
    width: 210mm;
    min-height: 297mm;
    max-height: 297mm;
    margin: 0 auto;
    background: white;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    overflow: hidden;
    page-break-after: always;
  }

  .invoice-document {
    padding: 6mm;
    font-family: "Helvetica Neue", Arial, sans-serif;
    font-size: 9px;
    line-height: 1.2;
    color: #333;
    min-height: 297mm;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    background: #fff;
    position: relative;
  }

  /* Company Header */
  .company-header {
    display: flex;
    align-items: flex-start;
    gap: 10px;
    border-bottom: 1px solid #e0e0e0;
    padding-bottom: 10px;
    position: relative;
    flex-shrink: 0;
  }

  .company-logo {
    flex-shrink: 0;
  }

  .logo-image {
    width: 60px;
    height: 60px;
    border: 1px solid #000;
    object-fit: cover;
    background: #f0f0f0;
  }

  .company-info {
    flex: 1;
    text-align: center;
  }

  .company-name {
    font-size: 16px;
    font-weight: 600;
    margin: 0 0 2px 0;
    letter-spacing: 0.5px;
    color: #222;
  }

  .company-subtitle {
    font-size: 8px;
    margin: 0 0 4px 0;
    font-weight: 500;
    color: #555;
    text-transform: uppercase;
  }

  .company-address,
  .company-contact {
    font-size: 8px;
    margin: 2px 0;
    line-height: 1.2;
  }

  .document-type {
    position: absolute;
    top: 0;
    right: 0;
    font-size: 8px;
    font-weight: bold;
  }

  /* Invoice Header */
  .invoice-header {
    display: flex;
    justify-content: space-between;
    margin: 8px 0;
    gap: 10px;
    flex-shrink: 0;
  }

  .customer-section {
    flex: 1;
    padding: 10px 12px;
    background: #f8f8f8;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }

  .customer-section h3 {
    margin: 0 0 10px 0;
    font-size: 12px;
    color: #444;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .customer-section p {
    margin: 2px 0;
    line-height: 1.2;
    font-size: 9px;
    color: #333;
  }

  .customer-section p strong {
    font-weight: 600;
    color: #222;
  }

  .invoice-meta {
    flex: 1;
  }

  .meta-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    margin-bottom: 12px;
    background: #fff;
    border-radius: 4px;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .meta-table td {
    padding: 4px 8px;
    border: 1px solid #e0e0e0;
    font-size: 10px;
    color: #333;
  }

  .meta-table td:nth-child(1),
  .meta-table td:nth-child(3) {
    background: #f4f4f4;
    font-weight: 600;
    width: 30%;
    color: #444;
  }

  .meta-table td:nth-child(2),
  .meta-table td:nth-child(4) {
    width: 20%;
  }

  .dispatch-section {
    margin-top: 12px;
    padding: 8px 12px;
    background: #fff;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    font-size: 10px;
  }

  .dispatch-section p {
    margin: 0;
    color: #333;
  }

  /* Vendor and HSN Section */
  .vendor-hsn-section {
    display: flex;
    justify-content: space-between;
    margin-bottom: 05px;
    padding: 10px 15px;
    background: #f8f8f8;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    font-size: 10px;
    flex-shrink: 0;
    color: #444;
  }

  .vendor-hsn-section strong {
    color: #222;
    font-weight: 600;
    margin-right: 8px;
  }

  /* Items Table */
  .items-section {
    flex: 1;
    min-height: 120mm;
    display: flex;
    flex-direction: column;
    /* margin-bottom: 10px; */
  }

  .items-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    margin-bottom: 8px;
    flex: 1;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .items-table th,
  .items-table td {
    border: 1px solid #e0e0e0;
    padding: 2px 4px;
    text-align: center;
    vertical-align: middle;
    font-size: 8px;
    line-height: 1.2;
    color: #333;
  }

  .items-table th {
    background: #f4f4f4;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    color: #222;
    border-bottom: 2px solid #e0e0e0;
  }

  .items-table tbody {
    height: auto;
  }

  .items-table tbody tr {
    height: 18px;
    max-height: 18px;
  }

  .sr-col {
    width: 6%;
  }
  .desc-col {
    width: 55%;
    text-align: left;
  }
  .price-col {
    width: 13%;
  }
  .qty-col {
    width: 8%;
  }
  .amount-col {
    width: 18%;
  }

  .items-table .desc-col {
    text-align: left;
    padding-left: 6px;
  }

  .items-table .price-col,
  .items-table .qty-col,
  .items-table .amount-col {
    text-align: right;
    padding-right: 6px;
  }

  /* Tax and Total Rows */
  .tax-row td,
  .total-row td {
    padding: 3px 4px;
    font-size: 10px;
    font-weight: 600;
    vertical-align: middle;
  }

  .tax-label {
    text-align: right !important;
    padding-right: 20px !important;
  }

  .tax-amount {
    text-align: right !important;
    padding-right: 6px !important;
    border: 0.5px solid #666 !important;
  }

  .spacer-row td {
    border: none !important;
    height: 10px;
  }

  .total-row .tax-amount {
    background: #f0f0f0;
    font-weight: bold;
  }

  .tax-row td:not(.tax-amount),
  .total-row td:not(.tax-amount) {
    border: none !important;
  }

  /* Bank and Terms Section */
  .bank-section {
    margin: 00px 0;
    flex-shrink: 0;
  }

  .bank-terms-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .bank-details-cell {
    width: 50%;
    font-size: 8px;
    padding: 6px 8px;
    border-right: 1px solid #e0e0e0;
    vertical-align: top;
    background: #f8f8f8;
  }

  .bank-details-cell p {
    margin: 6px 0;
    line-height: 1.6;
    color: #333;
  }

  .bank-details-cell strong {
    color: #222;
    font-weight: 600;
    margin-right: 4px;
  }

  .terms-details-cell {
    width: 50%;
    font-size: 8px;
    padding: 6px 8px;
    vertical-align: top;
  }

  .terms-details-cell p {
    margin: 0 0 10px 0;
    font-weight: 600;
    line-height: 1.4;
    color: #222;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .terms-list {
    font-size: 9px;
    line-height: 1.5;
  }

  .terms-list p {
    margin: 6px 0;
    font-weight: normal;
    line-height: 1.5;
    position: relative;
    padding-left: 15px;
    color: #444;
  }

  .terms-list p:before {
    content: "‚Ä¢";
    position: absolute;
    left: 0;
    color: #666;
  }

  /* Footer and Payment Section */
  .invoice-footer {
    display: flex;
    justify-content: space-between;
    align-items: flex-end;
    margin: 8px 0;
    border-top: 1px solid #e0e0e0;
    padding-top: 06px;
    flex-shrink: 0;
  }

  .gst-info {
    flex: 1;
    font-size: 9px;
  }

  .gst-info p {
    margin: 4px 0;
    line-height: 1.4;
    color: #444;
  }

  .gst-info strong {
    color: #222;
    font-weight: 600;
    margin-right: 4px;
  }

  .signature-section {
    flex: 1;
    text-align: right;
    font-size: 10px;
  }

  .signature-section p {
    margin: 3px 0;
    color: #333;
  }

  .signature-section strong {
    color: #222;
    font-weight: 600;
  }

  .signature-space {
    height: 25px;
    margin: 5px 0;
    border-bottom: 1px dashed #ccc;
  }

  /* Payment Terms */
  .payment-terms {
    text-align: center;
    font-size: 8px;
    font-weight: 600;
    padding: 6px;
    background: #f8f8f8;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    color: #222;
    flex-shrink: 0;
  }

  .payment-terms p {
    margin: 0;
    letter-spacing: 0.5px;
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .invoice-controls {
      flex-direction: column;
      gap: 15px;
      text-align: center;
    }

    .button-group {
      flex-wrap: wrap;
      justify-content: center;
    }

    .invoice-wrapper {
      width: 100vw;
      min-height: auto;
      max-height: none;
    }

    .invoice-document {
      padding: 10mm !important;
      font-size: 9px !important;
      height: auto !important;
    }

    .company-header {
      flex-direction: column;
      text-align: center;
    }

    .invoice-header {
      flex-direction: column;
    }

    .tax-section {
      flex-direction: column;
    }

    .bank-section {
      margin-bottom: 8px;
    }

    .bank-terms-table {
      display: block;
    }

    .bank-details-cell,
    .terms-details-cell {
      display: block;
      width: 100% !important;
      padding: 5px 0 !important;
    }

    .invoice-footer {
      flex-direction: column;
      gap: 10px;
    }

    .items-section {
      min-height: auto;
    }

    .tax-right {
      flex: 1;
    }
  }
</style>

<script define:vars={{ AUTH_CONFIG }}>
  let currentInvoiceId = null;

  // Load invoice data from API
  async function loadInvoiceData() {
    try {
      document.getElementById("loadingState").style.display = "block";
      document.getElementById("errorState").style.display = "none";
      document.getElementById("invoiceContent").style.display = "none";

      // Get invoice ID from URL
      const urlParts = window.location.pathname.split("/");
      currentInvoiceId = urlParts[urlParts.length - 1];
      console.log("Loading invoice with ID:", currentInvoiceId);

      const apiUrl = `/api/bills/${currentInvoiceId}`;
      console.log("Making API request to:", apiUrl);

      const response = await fetch(apiUrl);
      console.log("API response status:", response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error("API error response:", errorText);
        throw new Error(
          `HTTP error! status: ${response.status} - ${errorText}`
        );
      }

      const responseData = await response.json();
      console.log("Full API response:", responseData);

      // Extract the bill data from the API response
      const billData = responseData.bill || responseData;
      console.log("Extracted bill data:", billData);

      if (!billData) {
        throw new Error("No bill data found in API response");
      }

      // Populate invoice with data
      populateInvoice(billData);

      document.getElementById("loadingState").style.display = "none";
      document.getElementById("invoiceContent").style.display = "block";
    } catch (error) {
      console.error("Error loading invoice:", error);
      document.getElementById("loadingState").style.display = "none";
      document.getElementById("errorState").style.display = "block";

      const errorMessageEl = document.getElementById("errorMessage");
      if (errorMessageEl) {
        errorMessageEl.textContent = `Failed to load invoice: ${error.message}`;
      }
    }
  }

  function populateInvoice(bill) {
    console.log("Populating invoice with data:", bill);

    // Basic invoice details
    document.getElementById("invoiceNumber").textContent = bill.id || "-";
    document.getElementById("invoiceDate").textContent =
      formatDate(bill.invoice_date) || "-";
    document.getElementById("challanNumber").textContent =
      bill.challan_number || "-";
    document.getElementById("challanDate").textContent =
      formatDate(bill.challan_date) || "-";
    document.getElementById("poNumber").textContent = bill.po_number || "-";
    document.getElementById("poDate").textContent =
      formatDate(bill.po_date) || "-";
    document.getElementById("dispatchDetails").textContent =
      bill.dispatch_details || "-";
    document.getElementById("vendorCode").textContent =
      bill.vendor_code || "*****";
    document.getElementById("hsnCode").textContent = bill.hsn_code || "-";

    // Customer information
    const customerInfo = document.getElementById("customerInfo");
    // Format customer address with proper line breaks
    const formattedAddress = bill.customer_address
      ? bill.customer_address
          .split("\n")
          .map((line) =>
            line.includes("-----")
              ? `<hr style="margin: 4px 0; border: none; border-top: 1px dashed #ccc; opacity: 0.5;">`
              : `<p style="margin: 1px 0; line-height: 1.2;">${line.trim()}</p>`
          )
          .join("")
      : '<p style="margin: 1px 0; line-height: 1.2;">N/A</p>';

    customerInfo.innerHTML = `
            <p style="margin: 1px 0; line-height: 1.2;"><strong>${bill.customer_name || "N/A"}</strong></p>
            ${formattedAddress}
            <p style="margin: 1px 0; line-height: 1.2;">MOB NO. ${bill.customer_phone || "N/A"} | Email: ${bill.customer_email || ""}</p>
            <p style="margin: 1px 0; line-height: 1.2;">GST NO. ${bill.customer_gst_number || "N/A"}</p>
        `;

    // Helper function to create spacer row
    function createSpacerRow() {
      const row = document.createElement("tr");
      row.className = "spacer-row";
      row.style.height = "18px";
      row.style.maxHeight = "18px";
      row.innerHTML =
        '<td colspan="5" style="height: 18px; max-height: 18px;">&nbsp;</td>';
      return row;
    }

    // Items table
    const tbody = document.getElementById("itemsTableBody");
    tbody.innerHTML = "";

    let itemIndex = 0;

    // Add actual items
    if (bill.items && Array.isArray(bill.items)) {
      bill.items.forEach((item, index) => {
        const row = document.createElement("tr");
        const hasData =
          item.product_description ||
          item.product_name ||
          item.quantity ||
          item.unit_price;

        // Set fixed row height for all rows
        row.style.height = "18px";
        row.style.maxHeight = "18px";

        if (hasData) {
          row.innerHTML = `
                <td style="border: 0.5px solid #666; padding: 3px 4px; font-size: 10px; font-weight: 600; height: 18px; max-height: 18px; overflow: hidden;">${item.sr_no || index + 1}</td>
                <td style="border: 0.5px solid #666; padding: 3px 4px; text-align: left; font-size: 10px; font-weight: 600; height: 18px; max-height: 18px; overflow: hidden;">${item.product_description || item.product_name || ""}</td>
                <td style="border: 0.5px solid #666; padding: 3px 4px; text-align: right; font-size: 10px; font-weight: 600; height: 18px; max-height: 18px; overflow: hidden;">‚Çπ${parseFloat(item.unit_price || 0).toFixed(2)}</td>
                <td style="border: 0.5px solid #666; padding: 3px 4px; text-align: right; font-size: 10px; font-weight: 600; height: 18px; max-height: 18px; overflow: hidden;">${item.quantity || 0}</td>
                <td style="border: 0.5px solid #666; padding: 3px 4px; text-align: right; font-size: 10px; font-weight: 600; height: 18px; max-height: 18px; overflow: hidden;">‚Çπ${parseFloat(item.total_price || 0).toFixed(2)}</td>
              `;
        } else {
          row.innerHTML = `
                <td style="border: 0.5px solid #666; padding: 3px 4px; font-size: 10px; font-weight: 600; height: 18px; max-height: 18px;">&nbsp;</td>
                <td style="border: 0.5px solid #666; padding: 3px 4px; font-size: 10px; font-weight: 600; height: 18px; max-height: 18px;">&nbsp;</td>
                <td style="border: 0.5px solid #666; padding: 3px 4px; font-size: 10px; font-weight: 600; height: 18px; max-height: 18px;">&nbsp;</td>
                <td style="border: 0.5px solid #666; padding: 3px 4px; font-size: 10px; font-weight: 600; height: 18px; max-height: 18px;">&nbsp;</td>
                <td style="border: 0.5px solid #666; padding: 3px 4px; font-size: 10px; font-weight: 600; height: 18px; max-height: 18px;">&nbsp;</td>
              `;
        }
        tbody.appendChild(row);
        itemIndex++;
      });
    }

    // Add one empty row if no items
    if (itemIndex === 0) {
      const row = document.createElement("tr");
      row.style.height = "18px";
      row.style.maxHeight = "18px";
      row.innerHTML = `
                <td style="border: 0.5px solid #666; padding: 3px 4px; font-size: 10px; font-weight: 600; height: 18px; max-height: 18px;">&nbsp;</td>
                <td style="border: 0.5px solid #666; padding: 3px 4px; font-size: 10px; font-weight: 600; height: 18px; max-height: 18px;">&nbsp;</td>
                <td style="border: 0.5px solid #666; padding: 3px 4px; font-size: 10px; font-weight: 600; height: 18px; max-height: 18px;">&nbsp;</td>
                <td style="border: 0.5px solid #666; padding: 3px 4px; font-size: 10px; font-weight: 600; height: 18px; max-height: 18px;">&nbsp;</td>
                <td style="border: 0.5px solid #666; padding: 3px 4px; font-size: 10px; font-weight: 600; height: 18px; max-height: 18px;">&nbsp;</td>
            `;
      tbody.appendChild(row);
    }
    // Add spacer rows to ensure 15 total rows (including items)

    // Tax calculations and display
    const subtotal = parseFloat(bill.subtotal || 0);
    const cgstAmount = parseFloat(bill.cgst_amount || 0);
    const sgstAmount = parseFloat(bill.sgst_amount || 0);
    const igstAmount = parseFloat(bill.igst_amount || 0);
    const totalAmount = parseFloat(bill.total_amount || 0);
    const discountAmount = parseFloat(bill.discount_amount || 0) || 0;

    // Add spacer and tax rows
    const taxRows = [
      {
        label: "TOTAL AMOUNT BEFORE TAX",
        amount: subtotal.toFixed(2),
        id: "subtotalAmount",
      },
      {
        label: `CGST@${bill.cgst_percentage || 9}%`,
        amount: cgstAmount.toFixed(2),
        id: "cgstAmount",
      },
      {
        label: `SGST@${bill.sgst_percentage || 9}%`,
        amount: sgstAmount.toFixed(2),
        id: "sgstAmount",
      },
      {
        label: `IGST @ ${bill.igst_percentage || 18}%`,
        amount: igstAmount.toFixed(2),
        id: "igstAmount",
      },
      {
        label: "Discount",
        amount: discountAmount.toFixed(2),
        id: "discountAmount",
      },
      {
        label: "TOTAL Rs.",
        amount: totalAmount.toFixed(2),
        id: "totalAmount",
        isTotal: true,
      },
    ];

    // Add spacer before tax rows
    // tbody.appendChild(createSpacerRow());

    // Add tax rows with right-aligned totals and proper styling
    taxRows.forEach((taxRow, index) => {
      const row = document.createElement("tr");
      row.className = taxRow.isTotal ? "total-row" : "tax-row";
      // Set fixed row height for tax rows
      row.style.height = "18px";
      row.style.maxHeight = "18px";
      row.innerHTML = `
                <td style="border: none; height: 18px; max-height: 18px;"></td>
                   <td style="border: none"></td>
                <td style="border: 0.5px solid #666; height: 18px; max-height: 18px;" colspan=2>${taxRow.label}</td>
                <td class="tax-amount" id="${taxRow.id}" style="border: 0.5px solid #666; text-align: right; padding-right: 6px; height: 18px; max-height: 18px; overflow: hidden; ${taxRow.isTotal ? "font-weight: bold; background: #f0f0f0;" : ""}">‚Çπ${taxRow.amount}</td>
            `;
      tbody.appendChild(row);
    });

    for (let i = 0; i < 15 - itemIndex; i++) {
      tbody.appendChild(createSpacerRow());
    }

    document.getElementById("amountInWords").textContent =
      numberToWords(totalAmount) + " RUPEES ONLY";

    // Bank details
    let bankDetails = null;
    if (typeof bill.bank_details === "string") {
      try {
        bankDetails = JSON.parse(bill.bank_details);
      } catch (e) {
        console.warn("Failed to parse bank_details JSON:", e);
      }
    } else if (typeof bill.bank_details === "object" && bill.bank_details) {
      bankDetails = bill.bank_details;
    }

    // Use either structured bank_details or individual fields
    document.getElementById("bankName").textContent =
      bankDetails?.bank_name || bill.bank_name || "INDIAN BANK";
    document.getElementById("bankAccount").textContent =
      bankDetails?.account_number || bill.bank_account_number || "641205735S";
    document.getElementById("bankBranch").textContent =
      bankDetails?.branch || bill.bank_branch || "MALAD EAST";
    document.getElementById("bankIFSC").textContent =
      bankDetails?.ifsc_code || bill.bank_ifsc_code || "IDIB000M202";
    document.getElementById("bankAccountType").textContent =
      bankDetails?.account_type || bill.bank_account_type || "CURRENT A/C";

    // Terms and conditions
    const termsContent = document.getElementById("termsContent");
    if (bill.terms_and_conditions) {
      const terms = bill.terms_and_conditions
        .split("\n")
        .map((term) => term.trim())
        .filter((term) => term);
      termsContent.innerHTML =
        '<div class="terms-list">' +
        terms.map((term) => `<p>${term}</p>`).join("") +
        "</div>";
    } else {
      termsContent.innerHTML = `
        <div class="terms-list">
          <p>‚Ä¢ Price including Fabric/guts-Tax per Mtr. Party will have to give Two alternative.</p>
          <p>‚Ä¢ Inspection prior to dispatch if desire will be at our factory premises.</p>
          <p>‚Ä¢ 50% advance with confirm order & balance against delivery.</p>
          <p>‚Ä¢ Warranty period 12 Months against manufacturing defect.</p>
          <p>‚Ä¢ Payment of the bill must every month of 15th.</p>
          <p>‚Ä¢ Interest will be charged @ 20% on all accounts remaining unpaid after credit time.</p>
        </div>
      `;
    }
  }

  function formatDate(dateString) {
    if (!dateString) return "";
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString("en-GB"); // DD/MM/YYYY format
    } catch (e) {
      return dateString;
    }
  }

  function numberToWords(amount) {
    // Simple number to words conversion (basic implementation)
    const ones = [
      "",
      "ONE",
      "TWO",
      "THREE",
      "FOUR",
      "FIVE",
      "SIX",
      "SEVEN",
      "EIGHT",
      "NINE",
    ];
    const teens = [
      "TEN",
      "ELEVEN",
      "TWELVE",
      "THIRTEEN",
      "FOURTEEN",
      "FIFTEEN",
      "SIXTEEN",
      "SEVENTEEN",
      "EIGHTEEN",
      "NINETEEN",
    ];
    const tens = [
      "",
      "",
      "TWENTY",
      "THIRTY",
      "FORTY",
      "FIFTY",
      "SIXTY",
      "SEVENTY",
      "EIGHTY",
      "NINETY",
    ];

    if (amount === 0) return "ZERO";

    const num = Math.floor(amount);
    if (num < 10) return ones[num];
    if (num < 20) return teens[num - 10];
    if (num < 100)
      return (
        tens[Math.floor(num / 10)] + (num % 10 ? " " + ones[num % 10] : "")
      );
    if (num < 1000)
      return (
        ones[Math.floor(num / 100)] +
        " HUNDRED" +
        (num % 100 ? " " + numberToWords(num % 100) : "")
      );
    if (num < 100000)
      return (
        numberToWords(Math.floor(num / 1000)) +
        " THOUSAND" +
        (num % 1000 ? " " + numberToWords(num % 1000) : "")
      );

    return "AMOUNT TOO LARGE";
  }

  function logout() {
    localStorage.removeItem("authenticated");
    window.location.href = "/login";
  }

  // Check authentication and load invoice data on page load
  document.addEventListener("DOMContentLoaded", function () {
    if (localStorage.getItem("authenticated") !== "true") {
      window.location.href = "/login";
      return;
    }

    // Load invoice data
    loadInvoiceData();
  });

  // Make functions available globally
  window.logout = logout;
  window.loadInvoiceData = loadInvoiceData;
</script>
