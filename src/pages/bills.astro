---
import Layout from "../layouts/Layout.astro";
import { AUTH_CONFIG } from "../config/auth.js";
---

<Layout title="Invoice Management - Shagoon Chair">
  <main>
    <div class="page-header">
      <div class="header-left">
        <h1>üìã Invoice Management</h1>
        <p>Professional invoice system for Shagoon Seating Chair</p>
      </div>
      <div class="header-actions">
        <button onclick="refreshInvoices()" class="btn btn-info"
          >üîÑ Refresh</button
        >
        <a href="/bills/new" class="btn btn-primary">+ New Invoice</a>
        <button onclick="logout()" class="btn btn-danger">üö™ Logout</button>
      </div>
    </div>

    <div class="filters-section">
      <div class="filters-card">
        <h3>üîç Filter & Search</h3>
        <div class="filters-grid">
          <div class="filter-group">
            <label>Search:</label>
            <input
              type="text"
              id="searchInput"
              placeholder="Invoice ID, customer name..."
              onkeypress="if(event.key==='Enter') applyFilters()"
            />
          </div>
          <div class="filter-group">
            <label>Date Range:</label>
            <div class="date-range-inputs">
              <input
                type="date"
                id="startDate"
                placeholder="Start Date"
                onchange="applyFilters()"
              />
              <span class="date-separator">to</span>
              <input
                type="date"
                id="endDate"
                placeholder="End Date"
                onchange="applyFilters()"
              />
            </div>
          </div>
        </div>
        <div class="filter-actions">
          <button onclick="applyFilters()" class="btn btn-primary"
            >Apply Filters</button
          >
          <button onclick="clearFilters()" class="btn btn-outline">Clear</button
          >
        </div>
      </div>
    </div>

    <div class="invoices-section">
      <div class="invoices-header">
        <h2>üìÑ Invoices</h2>
      </div>

      <div id="invoicesContainer" class="invoices-grid">
        <!-- Loading state -->
        <div id="loadingState" class="loading-container">
          <div class="spinner"></div>
          <p>Loading invoices...</p>
        </div>

        <!-- Error state -->
        <div id="errorState" class="error-container" style="display: none;">
          <div class="error-message">
            <h4>‚ö†Ô∏è Error Loading Invoices</h4>
            <p id="errorText">Failed to load invoices. Please try again.</p>
            <button onclick="loadInvoices()" class="btn btn-primary"
              >üîÑ Retry</button
            >
          </div>
        </div>

        <!-- Table view -->
        <div
          id="tableView"
          class="invoices-table-container"
          style="display: none;"
        >
          <div class="table-wrapper">
            <table class="invoices-table">
              <thead>
                <tr>
                  <th>Bill ID</th>
                  <th>Customer Name</th>
                  <th>Invoice Date</th>
                  <th>Phone Number</th>
                  <th>Total Amount</th>
                  <th>Item Count</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="invoicesTableBody">
                <!-- Dynamic content will be loaded here -->
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <div class="pagination">
        <button
          id="prevBtn"
          onclick="goToPreviousPage()"
          class="btn btn-outline">‚Üê Previous</button
        >
        <span id="pageInfo" class="page-info">Page 1 of 1</span>
        <button id="nextBtn" onclick="goToNextPage()" class="btn btn-outline"
          >Next ‚Üí</button
        >
      </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="modal-overlay" style="display: none;">
      <div class="modal-content">
        <div class="modal-header">
          <h3>üóëÔ∏è Delete Invoice</h3>
          <button class="modal-close" onclick="closeDeleteModal()">√ó</button>
        </div>
        <div class="modal-body">
          <div class="warning-icon">‚ö†Ô∏è</div>
          <p>
            Are you sure you want to delete invoice <strong
              id="deleteInvoiceNumber"></strong>?
          </p>
          <p class="warning-text">
            This action cannot be undone and will permanently remove all invoice
            data.
          </p>

          <!-- Success/Error Messages -->
          <div
            id="deleteSuccessMessage"
            class="message-container success-message"
            style="display: none;"
          >
            <div class="message-icon">‚úÖ</div>
            <p>Invoice deleted successfully!</p>
          </div>

          <div
            id="deleteErrorMessage"
            class="message-container error-message"
            style="display: none;"
          >
            <div class="message-icon">‚ùå</div>
            <p id="deleteErrorText">
              Failed to delete invoice. Please try again.
            </p>
          </div>
        </div>
        <div class="modal-actions">
          <button
            id="cancelBtn"
            onclick="closeDeleteModal()"
            class="btn btn-outline">Cancel</button
          >
          <button
            id="deleteBtn"
            onclick="confirmDelete()"
            class="btn btn-danger">Delete Invoice</button
          >
          <button
            id="closeAfterActionBtn"
            onclick="closeDeleteModal()"
            class="btn btn-primary"
            style="display: none;">Close</button
          >
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  .page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: white;
    padding: 30px;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 25px;
  }

  .header-left h1 {
    margin: 0 0 5px 0;
    color: #2c3e50;
    font-size: 28px;
  }

  .header-left p {
    margin: 0;
    color: #7f8c8d;
    font-size: 16px;
  }

  .header-actions {
    display: flex;
    gap: 12px;
  }

  .filters-section {
    margin-bottom: 25px;
  }

  .filters-card {
    background: white;
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .filters-card h3 {
    margin: 0 0 20px 0;
    color: #2c3e50;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .filters-grid {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 20px;
    margin-bottom: 20px;
    align-items: end;
  }

  .filter-group {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }

  .filter-group label {
    font-weight: bold;
    color: #2c3e50;
    font-size: 14px;
  }

  .filter-group input,
  .filter-group select {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 14px;
  }

  .date-range-inputs {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .date-range-inputs input {
    flex: 1;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 14px;
  }

  .date-separator {
    color: #7f8c8d;
    font-size: 14px;
    font-weight: 500;
  }

  .filter-actions {
    display: flex;
    gap: 10px;
  }

  .summary-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
  }

  .summary-card {
    background: white;
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    gap: 20px;
    transition:
      transform 0.3s ease,
      box-shadow 0.3s ease;
  }

  .summary-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
  }

  .card-icon {
    font-size: 40px;
    width: 70px;
    height: 70px;
    border-radius: 50%;
    background: #f8f9fa;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .card-content h3 {
    margin: 0 0 5px 0;
    color: #2c3e50;
    font-size: 16px;
  }

  .card-content .amount {
    font-size: 24px;
    font-weight: bold;
    color: #27ae60;
    margin: 0;
  }

  .card-content .amount.pending {
    color: #f39c12;
  }

  .card-content .count {
    font-size: 24px;
    font-weight: bold;
    color: #3498db;
    margin: 0;
  }

  .card-content .percentage {
    font-size: 24px;
    font-weight: bold;
    color: #9b59b6;
    margin: 0;
  }

  .card-content small {
    color: #7f8c8d;
    font-size: 12px;
  }

  .invoices-section {
    background: white;
    padding: 30px;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .invoices-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 25px;
    padding-bottom: 15px;
    border-bottom: 2px solid #ecf0f1;
  }

  .invoices-header h2 {
    margin: 0;
    color: #2c3e50;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .invoices-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
  }

  .loading-container {
    grid-column: 1 / -1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 60px 20px;
    color: #7f8c8d;
  }

  .spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #f3f3f3;
    border-top: 4px solid #3498db;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 15px;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .error-container {
    grid-column: 1 / -1;
    display: flex;
    justify-content: center;
    padding: 40px 20px;
  }

  .error-message {
    background: #fee;
    border: 1px solid #fcc;
    border-radius: 8px;
    padding: 30px;
    text-align: center;
    max-width: 400px;
  }

  .error-message h4 {
    color: #e74c3c;
    margin: 0 0 10px 0;
  }

  .error-message p {
    color: #7f8c8d;
    margin: 0 0 20px 0;
  }

  .invoices-table-container {
    grid-column: 1 / -1;
    width: 100%;
  }

  .table-wrapper {
    overflow-x: auto;
    border-radius: 8px;
    border: 1px solid #e1e8ed;
  }

  .invoices-table {
    width: 100%;
    border-collapse: collapse;
    background: white;
  }

  .invoices-table th,
  .invoices-table td {
    padding: 15px 12px;
    text-align: left;
    border-bottom: 1px solid #e1e8ed;
  }

  .invoices-table th {
    background: #f8f9fa;
    font-weight: bold;
    color: #2c3e50;
    font-size: 14px;
    white-space: nowrap;
  }

  .invoices-table td {
    font-size: 14px;
  }

  .invoices-table tbody tr:hover {
    background: #f8f9fa;
  }

  .table-invoice-number {
    font-weight: bold;
    color: #2c3e50;
  }

  .table-customer-name {
    font-weight: 600;
    color: #2c3e50;
    max-width: 200px;
  }

  .table-phone {
    font-family: monospace;
    color: #2c3e50;
  }

  .table-amount {
    font-weight: bold;
    color: #27ae60;
  }

  .table-item-count {
    color: #7f8c8d;
    text-align: center;
  }

  .table-actions {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
  }

  .action-icon {
    font-size: 16px;
    padding: 6px;
    border: none;
    background: none;
    cursor: pointer;
    border-radius: 4px;
    transition: all 0.2s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 28px;
    height: 28px;
  }

  .action-icon:hover {
    background: #f8f9fa;
    transform: scale(1.1);
  }

  .view-icon:hover {
    background: #e3f2fd;
  }

  .edit-icon:hover {
    background: #f3e5f5;
  }

  .delete-icon:hover {
    background: #ffebee;
    color: #e74c3c;
  }

  .btn {
    padding: 8px 16px;
    border: none;
    border-radius: 6px;
    text-decoration: none;
    font-size: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 5px;
    font-weight: 500;
  }

  .btn-sm {
    padding: 6px 12px;
    font-size: 11px;
  }

  .btn-xs {
    padding: 4px 8px;
    font-size: 12px;
    min-width: 32px;
  }

  .btn-primary {
    background: #3498db;
    color: white;
  }

  .btn-secondary {
    background: #95a5a6;
    color: white;
  }

  .btn-success {
    background: #27ae60;
    color: white;
  }

  .btn-warning {
    background: #f39c12;
    color: white;
  }

  .btn-info {
    background: #2980b9;
    color: white;
  }

  .btn-danger {
    background: #e74c3c;
    color: white;
  }

  .btn-outline {
    background: transparent;
    color: #2c3e50;
    border: 1px solid #bdc3c7;
  }

  .btn-outline.disabled {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
  }

  .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 20px;
    margin-top: 30px;
  }

  .page-info {
    color: #7f8c8d;
    font-weight: 500;
  }

  /* Delete Modal Styles */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10000;
    backdrop-filter: blur(4px);
  }

  .modal-content {
    background: white;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    min-width: 400px;
    max-width: 500px;
    overflow: hidden;
    animation: modalSlideIn 0.3s ease-out;
  }

  @keyframes modalSlideIn {
    from {
      transform: translateY(-50px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes messageSlideIn {
    from {
      transform: translateY(-10px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  .modal-header {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    padding: 20px 25px;
    border-bottom: 1px solid #dee2e6;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .modal-header h3 {
    margin: 0;
    color: #2c3e50;
    font-size: 18px;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .modal-close {
    background: none;
    border: none;
    font-size: 24px;
    color: #6c757d;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: all 0.2s ease;
  }

  .modal-close:hover {
    background: #e9ecef;
    color: #495057;
  }

  .modal-body {
    padding: 30px 25px;
    text-align: center;
  }

  .warning-icon {
    font-size: 48px;
    margin-bottom: 15px;
  }

  .modal-body p {
    margin: 0 0 15px 0;
    color: #495057;
    font-size: 16px;
    line-height: 1.5;
  }

  .warning-text {
    color: #e74c3c !important;
    font-size: 14px !important;
    font-weight: 500;
  }

  .modal-actions {
    padding: 20px 25px;
    border-top: 1px solid #dee2e6;
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    background: #f8f9fa;
  }

  .modal-actions .btn {
    min-width: 100px;
  }

  /* Success/Error Message Styles */
  .message-container {
    margin-top: 20px;
    padding: 15px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    gap: 10px;
    animation: messageSlideIn 0.3s ease-out;
  }

  .success-message {
    background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
    border: 1px solid #c3e6cb;
    color: #155724;
  }

  .error-message {
    background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
    border: 1px solid #f5c6cb;
    color: #721c24;
  }

  .message-icon {
    font-size: 20px;
    flex-shrink: 0;
  }

  .message-container p {
    margin: 0 !important;
    font-weight: 500;
  }

  @media (max-width: 768px) {
    .page-header {
      flex-direction: column;
      gap: 20px;
      text-align: center;
    }

    .filters-grid {
      grid-template-columns: 1fr;
      gap: 15px;
    }

    .date-range-inputs {
      flex-direction: column;
      gap: 8px;
    }

    .date-separator {
      display: none;
    }

    .header-actions {
      flex-wrap: wrap;
      justify-content: center;
    }

    .table-actions {
      flex-direction: column;
      gap: 5px;
    }

    .invoices-table th,
    .invoices-table td {
      padding: 10px 8px;
      font-size: 12px;
    }

    .modal-content {
      min-width: auto;
      max-width: 90%;
      margin: 20px;
    }

    .modal-actions {
      flex-direction: column;
    }

    .modal-actions .btn {
      width: 100%;
    }
  }
</style>

<script define:vars={{ AUTH_CONFIG }}>
  // Storage configuration for 24-hour cache
  const STORAGE_KEYS = {
    INVOICES_DATA: "bills_invoices_data",
    LAST_UPDATED: "bills_last_updated",
    CACHE_DURATION: 24 * 60 * 60 * 1000, // 24 hours in milliseconds
  };

  // Check authentication and load data on page load
  document.addEventListener("DOMContentLoaded", () => {
    if (localStorage.getItem(AUTH_CONFIG.SESSION_KEY) !== "true") {
      window.location.href = AUTH_CONFIG.REDIRECT_PATHS.LOGIN;
      return;
    }
    // Load invoices with localStorage check
    loadInvoicesFromStorage();
  });

  let invoicesData = [];
  let currentDeleteId = null;

  // Check if stored data is still valid (24-hour cache)
  function isDataValid() {
    const lastUpdated = localStorage.getItem(STORAGE_KEYS.LAST_UPDATED);
    if (!lastUpdated) return false;

    const timeDiff = Date.now() - parseInt(lastUpdated);
    return timeDiff < STORAGE_KEYS.CACHE_DURATION;
  }

  // Load data from localStorage or API
  async function loadInvoicesFromStorage() {
    const storedData = localStorage.getItem(STORAGE_KEYS.INVOICES_DATA);

    if (storedData && isDataValid()) {
      // Use stored data (valid for 24 hours)
      try {
        const parsedData = JSON.parse(storedData);
        invoicesData = parsedData.bills || [];
        currentPage = parsedData.page || 1;
        totalPages = parsedData.totalPages || 1;

        hideLoading();
        renderTableView();
        updatePagination();
        console.log("‚úÖ Loaded invoices from localStorage (24h cache)");
      } catch (error) {
        console.error("Error parsing stored data:", error);
        await loadInvoicesFromAPI(1);
      }
    } else {
      // Load from API (cache expired or no data)
      console.log("üì° Cache expired or no data, loading from API");
      await loadInvoicesFromAPI(1);
    }
  }

  // Force refresh from API (bypasses cache)
  async function refreshInvoices() {
    console.log("üîÑ Manual refresh requested");
    currentPage = 1; // Reset to first page on refresh
    await loadInvoicesFromAPI(1);
  }

  // Load from API and store in localStorage
  async function loadInvoicesFromAPI(page = 1) {
    try {
      showLoading();

      const search = document.getElementById("searchInput").value.trim();
      const startDate = document.getElementById("startDate").value;
      const endDate = document.getElementById("endDate").value;

      // Build query parameters
      const params = new URLSearchParams();
      if (search) params.append("search", search);
      if (startDate) params.append("startDate", startDate);
      if (endDate) params.append("endDate", endDate);
      params.append("page", page.toString());
      params.append("limit", "10");

      const url =
        "/api/bills" + (params.toString() ? "?" + params.toString() : "");

      const response = await fetch(url, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      invoicesData = data.bills || [];
      currentPage = data.page || 1;
      totalPages = Math.ceil((data.total || 0) / (data.limit || 10));

      // Store successful response with 24-hour expiry
      const dataToStore = {
        bills: invoicesData,
        page: currentPage,
        totalPages: totalPages,
        timestamp: Date.now(),
        cacheExpiry: Date.now() + STORAGE_KEYS.CACHE_DURATION,
      };

      localStorage.setItem(
        STORAGE_KEYS.INVOICES_DATA,
        JSON.stringify(dataToStore)
      );
      localStorage.setItem(STORAGE_KEYS.LAST_UPDATED, Date.now().toString());

      hideLoading();
      renderTableView();
      updatePagination();
      console.log("üíæ Data cached for 24 hours");
    } catch (error) {
      console.error("Error loading invoices:", error);
      hideLoading();
      showError(
        "Failed to load invoices. Please check your connection and try again."
      );
    }
  }

  async function loadInvoices() {
    await loadInvoicesFromStorage();
  }

  function showLoading() {
    document.getElementById("loadingState").style.display = "block";
    document.getElementById("errorState").style.display = "none";
    document.getElementById("tableView").style.display = "none";
  }

  function hideLoading() {
    document.getElementById("loadingState").style.display = "none";
  }

  function showError(message) {
    document.getElementById("errorText").textContent = message;
    document.getElementById("errorState").style.display = "block";
    document.getElementById("tableView").style.display = "none";
  }

  function renderTableView() {
    const tbody = document.getElementById("invoicesTableBody");
    tbody.innerHTML = "";

    if (invoicesData.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="7" style="text-align: center; padding: 40px; color: #7f8c8d;">
            üìÑ No invoices found
          </td>
        </tr>
      `;
    } else {
      invoicesData.forEach((invoice) => {
        const row = createTableRow(invoice);
        tbody.appendChild(row);
      });
    }

    document.getElementById("tableView").style.display = "block";
  }

  function createTableRow(invoice) {
   console.log(invoice);
    const row = document.createElement("tr");

    const formattedAmount = `‚Çπ${parseFloat(invoice.total_amount || 0).toLocaleString()}`;
    const itemCount = invoice.items ? invoice.items.length : 0;

    // Format the invoice date

    const formattedDate = invoice.invoice_date
      ? formatDate(new Date(invoice.invoice_date))
      : "";

    function formatDate(date) {
      const day = date.getDate();
      const monthNames = [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec",
      ];
      const month = monthNames[date.getMonth()];
      const year = date.getFullYear();
      return `${day}-${month}-${year}`;
    }

    row.innerHTML = `
      <td class="table-invoice-number">${invoice.bill_number}</td>
      <td class="table-customer-name">${invoice.customer_name}</td>
      <td class="table-invoice-date">${formattedDate}</td>
      <td class="table-phone">${invoice.customer_phone || ""}</td>
      <td class="table-amount">${formattedAmount}</td>
      <td class="table-item-count">${itemCount} items</td>
      <td class="table-actions">
        <a href="/invoice/${invoice.id}" class="action-icon view-icon" title="View Invoice">üëÅÔ∏è</a>
        <button onclick="editInvoice(${invoice.id})" class="action-icon edit-icon" title="Edit Invoice">‚úèÔ∏è</button>
        <button onclick="deleteInvoice(${invoice.id}, '${invoice.id}')" class="action-icon delete-icon" title="Delete Invoice">üóëÔ∏è</button>
      </td>
    `;

    return row;
  }

  let currentPage = 1;
  let totalPages = 1;
  let currentFilters = {};

  async function applyFilters() {
    currentPage = 1; // Reset to first page when applying new filters
    // Force API call for filtered results (bypasses cache)
    await loadInvoicesFromAPI(1);
  }

  function clearFilters() {
    document.getElementById("searchInput").value = "";
    document.getElementById("startDate").value = "";
    document.getElementById("endDate").value = "";
    currentPage = 1;
    currentFilters = {};
    // Use localStorage if available, otherwise API
    loadInvoicesFromStorage();
  }

  function updatePagination() {
    const prevBtn = document.getElementById("prevBtn");
    const nextBtn = document.getElementById("nextBtn");
    const pageInfo = document.getElementById("pageInfo");

    pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;

    prevBtn.disabled = currentPage <= 1;
    nextBtn.disabled = currentPage >= totalPages;

    if (currentPage <= 1) {
      prevBtn.classList.add("disabled");
    } else {
      prevBtn.classList.remove("disabled");
    }

    if (currentPage >= totalPages) {
      nextBtn.classList.add("disabled");
    } else {
      nextBtn.classList.remove("disabled");
    }
  }

  async function goToPreviousPage() {
    if (currentPage > 1) {
      await loadInvoicesFromAPI(currentPage - 1);
    }
  }

  async function goToNextPage() {
    if (currentPage < totalPages) {
      await loadInvoicesFromAPI(currentPage + 1);
    }
  }

  // Make all functions globally accessible
  window.editInvoice = function (id) {
    window.location.href = `/bills/edit/${id}`;
  };

  window.deleteInvoice = function (id, billId) {
    currentDeleteId = id;
    document.getElementById("deleteInvoiceNumber").textContent = billId;

    // Reset modal state
    resetDeleteModal();

    document.getElementById("deleteModal").style.display = "flex";

    // Add event listeners for closing modal
    document.addEventListener("keydown", handleEscapeKey);
    document
      .getElementById("deleteModal")
      .addEventListener("click", handleOutsideClick);
  };

  function resetDeleteModal() {
    // Hide all messages
    document.getElementById("deleteSuccessMessage").style.display = "none";
    document.getElementById("deleteErrorMessage").style.display = "none";

    // Show confirmation elements
    document.querySelector(".warning-icon").style.display = "block";
    document.querySelector(".modal-body p:nth-child(2)").style.display =
      "block";
    document.querySelector(".warning-text").style.display = "block";

    // Show/hide buttons
    document.getElementById("cancelBtn").style.display = "inline-flex";
    document.getElementById("deleteBtn").style.display = "inline-flex";
    document.getElementById("closeAfterActionBtn").style.display = "none";

    // Reset button states
    document.getElementById("deleteBtn").disabled = false;
    document.getElementById("cancelBtn").disabled = false;
    document.getElementById("deleteBtn").textContent = "Delete Invoice";
  }

  window.closeDeleteModal = function () {
    document.getElementById("deleteModal").style.display = "none";
    currentDeleteId = null;

    // Remove event listeners
    document.removeEventListener("keydown", handleEscapeKey);
    document
      .getElementById("deleteModal")
      .removeEventListener("click", handleOutsideClick);

    // Reset modal state for next time
    resetDeleteModal();
  };

  function handleEscapeKey(e) {
    if (e.key === "Escape") {
      closeDeleteModal();
    }
  }

  function handleOutsideClick(e) {
    if (e.target === document.getElementById("deleteModal")) {
      closeDeleteModal();
    }
  }

  window.confirmDelete = async function () {
    if (!currentDeleteId) return;

    // Disable buttons and show loading state
    const deleteBtn = document.getElementById("deleteBtn");
    const cancelBtn = document.getElementById("cancelBtn");
    const closeBtn = document.getElementById("closeAfterActionBtn");

    deleteBtn.disabled = true;
    cancelBtn.disabled = true;
    deleteBtn.textContent = "Deleting...";

    try {
      const response = await fetch(`/api/bills/${currentDeleteId}`, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(
          errorData.error || `HTTP error! status: ${response.status}`
        );
      }

      // Hide confirmation content and show success message
      document.querySelector(".warning-icon").style.display = "none";
      document.querySelector(".modal-body p:nth-child(2)").style.display =
        "none";
      document.querySelector(".warning-text").style.display = "none";

      document.getElementById("deleteSuccessMessage").style.display = "flex";

      // Hide delete/cancel buttons, show close button
      deleteBtn.style.display = "none";
      cancelBtn.style.display = "none";
      closeBtn.style.display = "inline-block";

      // Reload invoices and update cache
      await loadInvoicesFromAPI(1);
    } catch (error) {
      console.error("Error deleting invoice:", error);

      // Hide confirmation content and show error message
      document.querySelector(".warning-icon").style.display = "none";
      document.querySelector(".modal-body p:nth-child(2)").style.display =
        "none";
      document.querySelector(".warning-text").style.display = "none";

      document.getElementById("deleteErrorMessage").style.display = "flex";
      document.getElementById("deleteErrorText").textContent =
        `Failed to delete invoice: ${error.message}`;

      // Hide delete/cancel buttons, show close button
      deleteBtn.style.display = "none";
      cancelBtn.style.display = "none";
      closeBtn.style.display = "inline-block";
    }
  };

  window.logout = function () {
    localStorage.removeItem(AUTH_CONFIG.SESSION_KEY);

    window.location.href = AUTH_CONFIG.REDIRECT_PATHS.LOGIN;
  };

  window.applyFilters = applyFilters;

  window.clearFilters = clearFilters;

  window.loadInvoices = loadInvoices;

  window.loadInvoicesFromStorage = loadInvoicesFromStorage;

  window.loadInvoicesFromAPI = loadInvoicesFromAPI;

  window.refreshInvoices = refreshInvoices;

  window.goToPreviousPage = goToPreviousPage;

  window.goToNextPage = goToNextPage;
</script>
