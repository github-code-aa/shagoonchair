---
import Layout from '../../../layouts/Layout.astro';
import { AUTH_CONFIG } from '../../../config/auth.js';
---

<Layout title="Edit Invoice - Shagoon Chair">
  <main>
    <!-- Loading State -->
    <div id="loadingState" class="loading-container">
      <div class="spinner"></div>
      <p>Loading invoice data...</p>
    </div>

    <!-- Error State -->
    <div id="errorState" class="error-container" style="display: none;">
      <div class="error-message">
        <h4>‚ö†Ô∏è Error Loading Invoice</h4>
        <p id="errorMessage">Failed to load invoice. Please try again.</p>
        <button onclick="loadInvoiceData()" class="btn btn-primary">üîÑ Retry</button>
      </div>
    </div>

    <div id="editForm" style="display: none;">
      <div class="page-header">
        <h1>‚úèÔ∏è Edit Invoice</h1>
      <div class="header-actions">
        <a href="/bills" class="btn btn-outline">‚Üê Back to Bills</a>
        <button onclick="logout()" class="btn btn-danger">üö™ Logout</button>
      </div>
    </div>

    <form id="invoiceForm" class="invoice-form">
      <div class="form-grid">
        <!-- Invoice Details Section -->
        <section class="form-section">
          <h2>üìã Invoice Details</h2>
          <div class="form-row">
            <div class="form-group">
              <label for="invoice_date">Invoice Date *</label>
              <input type="date" id="invoice_date" name="invoice_date" required>
            </div>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label for="challan_number">Challan Number</label>
              <input type="text" id="challan_number" name="challan_number" placeholder="e.g., CH-001">
            </div>
            <div class="form-group">
              <label for="challan_date">Challan Date</label>
              <input type="date" id="challan_date" name="challan_date">
            </div>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label for="po_number">P.O. Number</label>
              <input type="text" id="po_number" name="po_number" placeholder="e.g., PO-2025-001">
            </div>
            <div class="form-group">
              <label for="po_date">P.O. Date</label>
              <input type="date" id="po_date" name="po_date">
            </div>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label for="vendor_code">Vendor Code</label>
              <input type="text" id="vendor_code" name="vendor_code" placeholder="e.g., VEN001">
            </div>
            <div class="form-group">
              <label for="hsn_code">HSN Code</label>
              <input type="text" id="hsn_code" name="hsn_code" placeholder="e.g., 9403">
            </div>
          </div>
          <div class="form-group">
            <label for="dispatch_details">Dispatch Details</label>
            <textarea id="dispatch_details" name="dispatch_details" rows="2" placeholder="e.g., Dispatched through XYZ Transport, Vehicle No. MH-01-AB-1234"></textarea>
          </div>
        </section>

        <!-- Customer Details Section -->
        <section class="form-section">
          <h2>üë§ Customer Details</h2>
          <div class="form-row">
            <div class="form-group">
              <label for="customer_name">Customer Name *</label>
              <input type="text" id="customer_name" name="customer_name" required placeholder="e.g., M/S. CUPS AND MOULDS LLP.">
            </div>
            <div class="form-group">
              <label for="customer_code">Customer Code</label>
              <input type="number" id="customer_code" name="customer_code" placeholder="e.g., 1001">
            </div>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label for="customer_phone">Phone Number *</label>
              <input type="tel" id="customer_phone" name="customer_phone" required placeholder="+91 9820732807">
            </div>
            <div class="form-group">
              <label for="customer_email">Email</label>
              <input type="email" id="customer_email" name="customer_email" placeholder="customer@example.com">
            </div>
          </div>
          <div class="form-group">
            <label for="customer_address">Customer Address *</label>
            <textarea id="customer_address" name="customer_address" required rows="3" placeholder="Complete billing address"></textarea>
          </div>
          <div class="form-group">
            <label for="customer_gst_number">Customer GST Number</label>
            <input type="text" id="customer_gst_number" name="customer_gst_number" placeholder="27AAQFC3444C1ZK">
          </div>
        </section>
      </div>

      <!-- Items Section -->
      <section class="form-section">
        <h2>üõçÔ∏è Invoice Items</h2>
        <div class="items-container">
          <div class="items-header">
            <span>Sr. No</span>
            <span>Description</span>
            <span>Unit Price (‚Çπ)</span>
            <span>Qty</span>
            <span>Amount (‚Çπ)</span>
            <span>Action</span>
          </div>
          <div id="itemsList">
            <!-- Items will be dynamically added here -->
          </div>
          <button type="button" id="addItemBtn" class="btn btn-success">+ Add Item</button>
        </div>
      </section>

      <!-- Tax & Payment Section -->
      <div class="form-grid">
        <section class="form-section">
          <h2>üí∞ Tax Calculation</h2>
          <div class="form-row">
            <div class="form-group">
              <label for="cgst_percentage">CGST % *</label>
              <input type="number" id="cgst_percentage" name="cgst_percentage" value="9" step="0.01" required>
            </div>
            <div class="form-group">
              <label for="sgst_percentage">SGST % *</label>
              <input type="number" id="sgst_percentage" name="sgst_percentage" value="9" step="0.01" required>
            </div>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label for="igst_percentage">IGST %</label>
              <input type="number" id="igst_percentage" name="igst_percentage" value="0" step="0.01">
            </div>
            <div class="form-group">
              <label for="discount_percentage">Discount %</label>
              <input type="number" id="discount_percentage" name="discount_percentage" value="0" step="0.01">
            </div>
          </div>
          
          <div class="calculation-summary">
            <div class="calc-row">
              <span>Subtotal:</span>
              <span id="subtotalDisplay">‚Çπ0.00</span>
            </div>
            <div class="calc-row">
              <span>CGST:</span>
              <span id="cgstDisplay">‚Çπ0.00</span>
            </div>
            <div class="calc-row">
              <span>SGST:</span>
              <span id="sgstDisplay">‚Çπ0.00</span>
            </div>
            <div class="calc-row">
              <span>IGST:</span>
              <span id="igstDisplay">‚Çπ0.00</span>
            </div>
            <div class="calc-row">
              <span>Discount:</span>
              <span id="discountDisplay">‚Çπ0.00</span>
            </div>
            <div class="calc-row total-row">
              <span><strong>Total Amount:</strong></span>
              <span id="totalDisplay"><strong>‚Çπ0.00</strong></span>
            </div>
          </div>
        </section>

        <section class="form-section">
          <h2>üí≥ Payment Details</h2>
          <div class="form-group">
            <label for="payment_method">Payment Method *</label>
            <select id="payment_method" name="payment_method" required>
              <option value="cash">Cash</option>
              <option value="card">Card</option>
              <option value="upi">UPI</option>
              <option value="bank_transfer">Bank Transfer</option>
              <option value="cheque">Cheque</option>
              <option value="dd">Demand Draft</option>
            </select>
          </div>
          <div class="form-group">
            <label for="payment_status">Payment Status *</label>
            <select id="payment_status" name="payment_status" required>
              <option value="pending">Pending</option>
              <option value="paid">Paid</option>
            </select>
          </div>
          <div class="form-group">
            <label for="payment_terms">Payment Terms</label>
            <textarea id="payment_terms" name="payment_terms" rows="2">PAYMENT ONLY BY CROSSED CHEQUES / DD PAYABLE IN MUMBAI</textarea>
          </div>
        </section>
      </div>

      <!-- Bank Details Section -->
      <section class="form-section">
        <h2>üè¶ Bank Details</h2>
        <div class="form-grid">
          <div class="form-group">
            <label for="bank_name">Bank Name</label>
            <input type="text" id="bank_name" name="bank_name" placeholder="Bank Name">
          </div>
          <div class="form-group">
            <label for="bank_account_number">Account Number</label>
            <input type="text" id="bank_account_number" name="bank_account_number" placeholder="Account Number">
          </div>
          <div class="form-group">
            <label for="bank_branch">Branch</label>
            <input type="text" id="bank_branch" name="bank_branch" placeholder="Branch Name">
          </div>
          <div class="form-group">
            <label for="bank_ifsc_code">IFSC Code</label>
            <input type="text" id="bank_ifsc_code" name="bank_ifsc_code" placeholder="IFSC Code">
          </div>
          <div class="form-group">
            <label for="bank_account_type">Account Type</label>
            <input type="text" id="bank_account_type" name="bank_account_type" placeholder="Account Type">
          </div>
        </div>
      </section>

      <!-- Notes Section -->
      <section class="form-section">
        <h2>üìù Additional Notes</h2>
        <div class="form-group">
          <label for="notes">Notes</label>
          <textarea id="notes" name="notes" rows="3" placeholder="Any additional notes or comments"></textarea>
        </div>
      </section>

      <!-- Terms and Conditions Section -->
      <section class="form-section">
        <h2>üìã Terms and Conditions</h2>
        <div class="form-group">
          <label for="terms_and_conditions">Terms and Conditions</label>
          <textarea id="terms_and_conditions" name="terms_and_conditions" rows="6">‚Ä¢ Price including Fabric/guts-Tax per Mtr. Party will have to give Two alternative.
‚Ä¢ Inspection prior to dispatch if desire will be at our factory premises.
‚Ä¢ 50% advance with confirm order & balance against delivery.
‚Ä¢ Warranty period 12 Months against manufacturing defect.
‚Ä¢ Payment of the bill must every month of 15th.
‚Ä¢ Interest will be charged @ 20% on all accounts remaining unpaid after credit time.</textarea>
        </div>
      </section>

      <!-- Form Actions -->
      <div class="form-actions">
        <button type="submit" class="btn btn-primary" id="submitBtn">ÔøΩ Update Invoice</button>

      </div>
    </form>
    </div>

    <!-- Loading Overlay -->
    <div id="loadingOverlay" class="loading-overlay">
      <div class="loading-content">
        <div class="spinner"></div>
        <p>Updating Invoice...</p>
      </div>
    </div>

    <!-- Message Box -->
    <div id="messageBox" class="message-box">
      <div class="message-content">
        <div class="message-header">
          <span id="messageTitle">Message</span>
          <button id="messageClose" class="message-close">√ó</button>
        </div>
        <div class="message-body">
          <div id="messageIcon" class="message-icon"></div>
          <div id="messageText" class="message-text"></div>
        </div>
        <div class="message-actions">
          <button id="messageOk" class="btn btn-primary">OK</button>
          <button id="messageCancel" class="btn btn-outline" style="display: none;">Cancel</button>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  /* Loading and Error States */
  .loading-container, .error-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 400px;
    background: white;
    padding: 40px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    text-align: center;
  }

  .error-message {
    max-width: 400px;
  }

  .error-message h4 {
    color: #e74c3c;
    margin-bottom: 15px;
  }

  .error-message p {
    color: #6c757d;
    margin-bottom: 20px;
    line-height: 1.5;
  }

  .page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 20px;
  }

  .page-header h1 {
    margin: 0;
    color: #2c3e50;
  }

  .header-actions {
    display: flex;
    gap: 10px;
  }

  .invoice-form {
    background: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .form-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
  }

  .form-section {
    margin-bottom: 30px;
  }

  .form-section h2 {
    color: #2c3e50;
    border-bottom: 2px solid #3498db;
    padding-bottom: 10px;
    margin-bottom: 20px;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
  }

  .form-group {
    margin-bottom: 15px;
  }

  .form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    color: #2c3e50;
  }

  .form-group input,
  .form-group textarea,
  .form-group select {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
    transition: border-color 0.3s ease;
  }

  .form-group input:focus,
  .form-group textarea:focus,
  .form-group select:focus {
    outline: none;
    border-color: #3498db;
    box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
  }

  .items-container {
    border: 1px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 20px;
  }

  .items-header {
    display: grid;
    grid-template-columns: 80px 2fr 140px 100px 140px 100px;
    gap: 15px;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    padding: 15px 20px;
    font-weight: 600;
    font-size: 14px;
    border-bottom: 2px solid #dee2e6;
    text-align: center;
    color: #495057;
    align-items: center;
  }

  .item-row {
    display: grid !important;
    grid-template-columns: 80px 2fr 140px 100px 140px 100px !important;
    gap: 15px !important;
    padding: 15px 20px !important;
    border-bottom: 1px solid #f1f3f4 !important;
    align-items: center !important;
    background: white !important;
    transition: background-color 0.2s ease;
  }

  .item-row:hover {
    background: #fafbfc;
  }

  .item-row:last-child {
    border-bottom: none;
  }

  .item-row input,
  .item-row select {
    padding: 12px !important;
    border: 1px solid #dee2e6 !important;
    border-radius: 6px !important;
    font-size: 14px !important;
    font-weight: 500 !important;
    transition: all 0.3s ease !important;
    background: white !important;
    color: #495057 !important;
    width: 100% !important;
    box-sizing: border-box !important;
  }

  .item-row input:focus,
  .item-row select:focus {
    outline: none !important;
    border-color: #3498db !important;
    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1) !important;
    background: #fff !important;
  }

  .item-row input::placeholder {
    color: #adb5bd !important;
    font-weight: 400 !important;
  }

  .item-total {
    font-weight: 600 !important;
    font-size: 15px !important;
    color: #27ae60 !important;
    text-align: center !important;
    padding: 12px 8px !important;
    background: linear-gradient(135deg, #f8fff9 0%, #e8f5e8 100%) !important;
    border-radius: 6px !important;
    border: 1px solid #d4edda !important;
    min-width: 100px !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
  }

  .sr-no {
    font-weight: 600 !important;
    font-size: 16px !important;
    color: #3498db !important;
    text-align: center !important;
    background: linear-gradient(135deg, #f8fbff 0%, #e3f2fd 100%) !important;
    padding: 8px !important;
    border-radius: 6px !important;
    border: 1px solid #e3f2fd !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
  }

  .calculation-summary {
    background: #f8f9fa;
    padding: 15px;
    border-radius: 6px;
    margin-top: 15px;
  }

  .calc-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 8px;
    padding: 4px 0;
  }

  .total-row {
    border-top: 2px solid #3498db;
    padding-top: 8px;
    margin-top: 10px;
    font-size: 16px;
  }

  .btn {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    text-decoration: none;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 8px;
  }

  .btn-primary {
    background: #3498db;
    color: white;
  }

  .btn-secondary {
    background: #95a5a6;
    color: white;
  }

  .btn-success {
    background: #27ae60;
    color: white;
  }

  .btn-danger {
    background: #e74c3c;
    color: white;
  }

  .btn-outline {
    background: transparent;
    color: #2c3e50;
    border: 1px solid #2c3e50;
  }

  .btn-sm {
    padding: 6px 12px;
    font-size: 12px;
  }

  .input-with-button {
    display: flex;
    gap: 8px;
    align-items: center;
  }

  .input-with-button input {
    flex: 1;
  }

  .input-with-button .btn {
    white-space: nowrap;
  }

  .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
  }

  .form-actions {
    display: flex;
    gap: 15px;
    justify-content: center;
    padding-top: 20px;
    border-top: 1px solid #eee;
  }

  .remove-item {
    background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
    color: white;
    border: none;
    padding: 10px 12px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(231, 76, 60, 0.2);
  }

  .remove-item:hover {
    background: linear-gradient(135deg, #c0392b 0%, #a93226 100%);
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(231, 76, 60, 0.3);
  }

  .btn.btn-success {
    background: linear-gradient(135deg, #27ae60 0%, #229954 100%);
    color: white;
    padding: 12px 24px;
    margin-top: 15px;
    font-weight: 600;
    box-shadow: 0 3px 6px rgba(39, 174, 96, 0.2);
    transition: all 0.3s ease;
  }

  .btn.btn-success:hover:not(:disabled) {
    background: linear-gradient(135deg, #229954 0%, #1e8449 100%);
    transform: translateY(-2px);
    box-shadow: 0 5px 12px rgba(39, 174, 96, 0.3);
  }

  .btn.btn-success:disabled {
    background: linear-gradient(135deg, #95a5a6 0%, #7f8c8d 100%) !important;
    cursor: not-allowed !important;
    opacity: 0.6 !important;
    transform: none !important;
    box-shadow: 0 2px 4px rgba(149, 165, 166, 0.2) !important;
  }

  .btn.btn-success:disabled:hover {
    transform: none !important;
    box-shadow: 0 2px 4px rgba(149, 165, 166, 0.2) !important;
  }

  @media (max-width: 768px) {
    .page-header {
      flex-direction: column;
      gap: 15px;
      text-align: center;
    }

    .form-grid {
      grid-template-columns: 1fr;
    }

    .form-row {
      grid-template-columns: 1fr;
    }

    /* Mobile responsive items table */
    .items-container {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .items-header {
      display: grid !important;
      grid-template-columns: 60px 300px 100px 80px 100px 80px !important;
      gap: 10px !important;
      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
      padding: 12px 15px !important;
      font-weight: 600;
      font-size: 12px !important;
      border-bottom: 2px solid #dee2e6;
      text-align: center;
      color: #495057;
      align-items: center;
      min-width: 750px; /* Ensure minimum width for horizontal scroll */
      white-space: nowrap;
    }

    .item-row {
      display: grid !important;
      grid-template-columns: 60px 300px 100px 80px 100px 80px !important;
      gap: 10px !important;
      padding: 12px 15px !important;
      border-bottom: 1px solid #f1f3f4 !important;
      align-items: center !important;
      background: white !important;
      transition: background-color 0.2s ease;
      min-width: 750px !important; /* Ensure minimum width for horizontal scroll */
    }

    .item-row:hover {
      background: #fafbfc !important;
    }

    .item-row input,
    .item-row select {
      padding: 10px 8px !important;
      border: 1px solid #dee2e6 !important;
      border-radius: 4px !important;
      font-size: 14px !important;
      font-weight: 500 !important;
      transition: all 0.3s ease !important;
      background: white !important;
      color: #495057 !important;
      width: 100% !important;
      box-sizing: border-box !important;
      min-width: 0 !important;
    }

    .item-row input:focus,
    .item-row select:focus {
      outline: none !important;
      border-color: #3498db !important;
      box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.1) !important;
      background: #fff !important;
    }

    .item-row input::placeholder {
      color: #adb5bd !important;
      font-weight: 400 !important;
      font-size: 12px !important;
    }

    .item-row .sr-no {
      font-weight: 600 !important;
      font-size: 14px !important;
      color: #3498db !important;
      text-align: center !important;
      background: linear-gradient(135deg, #f8fbff 0%, #e3f2fd 100%) !important;
      padding: 8px 4px !important;
      border-radius: 4px !important;
      border: 1px solid #e3f2fd !important;
      display: flex !important;
      align-items: center !important;
      justify-content: center !important;
      min-width: 50px !important;
    }

    .item-row .item-total {
      font-weight: 600 !important;
      font-size: 13px !important;
      color: #27ae60 !important;
      text-align: center !important;
      padding: 8px 4px !important;
      background: linear-gradient(135deg, #f8fff9 0%, #e8f5e8 100%) !important;
      border-radius: 4px !important;
      border: 1px solid #d4edda !important;
      display: flex !important;
      align-items: center !important;
      justify-content: center !important;
      min-width: 100px !important;
      white-space: nowrap !important;
    }

    .remove-item {
      padding: 8px 10px !important;
      font-size: 12px !important;
      border-radius: 4px !important;
      min-width: 60px !important;
      white-space: nowrap !important;
    }

    /* Add scroll hint styling */
    .items-container::after {
      content: "‚Üê Scroll horizontally to view all columns ‚Üí";
      display: block;
      text-align: center;
      padding: 8px;
      background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
      color: #856404;
      font-size: 12px;
      font-weight: 500;
      border-top: 1px solid #f0e68c;
    }

    .form-actions {
      flex-direction: column;
    }

    /* Improve mobile form inputs */
    .form-group input,
    .form-group textarea,
    .form-group select {
      font-size: 16px; /* Prevent zoom on iOS */
      padding: 12px;
    }
  }

  /* Loading Overlay */
  .loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    backdrop-filter: blur(4px);
  }

  .loading-overlay.show {
    display: flex;
  }

  .loading-content {
    background: white;
    padding: 40px;
    border-radius: 12px;
    text-align: center;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    min-width: 300px;
  }

  .spinner {
    width: 50px;
    height: 50px;
    border: 5px solid #f3f3f3;
    border-top: 5px solid #3498db;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 20px;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .loading-content p {
    margin: 0;
    font-size: 16px;
    color: #2c3e50;
    font-weight: 500;
  }

  /* Message Box */
  .message-box {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 10000;
    backdrop-filter: blur(4px);
  }

  .message-box.show {
    display: flex;
  }

  .message-content {
    background: white;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    min-width: 400px;
    max-width: 500px;
    overflow: hidden;
    animation: messageSlideIn 0.3s ease-out;
  }

  @keyframes messageSlideIn {
    from {
      transform: translateY(-50px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  .message-header {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    padding: 20px 25px;
    border-bottom: 1px solid #dee2e6;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .message-header span {
    font-weight: 600;
    font-size: 18px;
    color: #2c3e50;
  }

  .message-close {
    background: none;
    border: none;
    font-size: 24px;
    color: #6c757d;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: all 0.2s ease;
  }

  .message-close:hover {
    background: #e9ecef;
    color: #495057;
  }

  .message-body {
    padding: 30px 25px;
    display: flex;
    align-items: flex-start;
    gap: 20px;
  }

  .message-icon {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    flex-shrink: 0;
  }

  .message-icon.success {
    background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
    color: #155724;
  }

  .message-icon.success::before {
    content: "‚úì";
  }

  .message-icon.error {
    background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
    color: #721c24;
  }

  .message-icon.error::before {
    content: "‚úï";
  }

  .message-icon.warning {
    background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
    color: #856404;
  }

  .message-icon.warning::before {
    content: "‚ö†";
  }

  .message-icon.info {
    background: linear-gradient(135deg, #d1ecf1 0%, #bee5eb 100%);
    color: #0c5460;
  }

  .message-icon.info::before {
    content: "‚Ñπ";
  }

  .message-text {
    flex: 1;
    font-size: 16px;
    line-height: 1.5;
    color: #495057;
  }

  .message-actions {
    padding: 20px 25px;
    border-top: 1px solid #dee2e6;
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    background: #f8f9fa;
  }

  .message-actions .btn {
    min-width: 80px;
  }

  @media (max-width: 768px) {
    .message-content {
      min-width: auto;
      max-width: 90%;
      margin: 20px;
    }

    .loading-content {
      min-width: auto;
      max-width: 90%;
      margin: 20px;
      padding: 30px 20px;
    }
  }
</style>

<script define:vars={{ AUTH_CONFIG }}>
  let currentInvoiceId = null;
  let itemCounter = 0;
  const MAX_ITEMS = 15;

  // Message box and loader functions
  function showLoader(message = 'Processing...') {
    const overlay = document.getElementById('loadingOverlay');
    const text = overlay.querySelector('p');
    text.textContent = message;
    overlay.classList.add('show');
    
    // Disable form submission button
    const submitBtn = document.getElementById('submitBtn');
    if (submitBtn) {
      submitBtn.disabled = true;
      submitBtn.style.opacity = '0.6';
      submitBtn.style.cursor = 'not-allowed';
    }
  }

  function hideLoader() {
    const overlay = document.getElementById('loadingOverlay');
    overlay.classList.remove('show');
    
    // Re-enable form submission button
    const submitBtn = document.getElementById('submitBtn');
    if (submitBtn) {
      submitBtn.disabled = false;
      submitBtn.style.opacity = '1';
      submitBtn.style.cursor = 'pointer';
    }
  }

  function showMessage(type, title, message, showCancel = false) {
    return new Promise((resolve) => {
      const messageBox = document.getElementById('messageBox');
      const messageTitle = document.getElementById('messageTitle');
      const messageIcon = document.getElementById('messageIcon');
      const messageText = document.getElementById('messageText');
      const messageOk = document.getElementById('messageOk');
      const messageCancel = document.getElementById('messageCancel');
      const messageClose = document.getElementById('messageClose');
      
      // Set content
      messageTitle.textContent = title;
      messageText.textContent = message;
      
      // Set icon type
      messageIcon.className = `message-icon ${type}`;
      
      // Show/hide cancel button
      if (showCancel) {
        messageCancel.style.display = 'inline-flex';
        messageOk.textContent = 'Yes';
        messageCancel.textContent = 'No';
      } else {
        messageCancel.style.display = 'none';
        messageOk.textContent = 'OK';
      }
      
      // Show message box
      messageBox.classList.add('show');
      
      // Handle button clicks
      function handleOk() {
        messageBox.classList.remove('show');
        cleanup();
        resolve(true);
      }
      
      function handleCancel() {
        messageBox.classList.remove('show');
        cleanup();
        resolve(false);
      }
      
      function handleClose() {
        messageBox.classList.remove('show');
        cleanup();
        resolve(false);
      }
      
      function cleanup() {
        messageOk.removeEventListener('click', handleOk);
        messageCancel.removeEventListener('click', handleCancel);
        messageClose.removeEventListener('click', handleClose);
      }
      
      // Add event listeners
      messageOk.addEventListener('click', handleOk);
      messageCancel.addEventListener('click', handleCancel);
      messageClose.addEventListener('click', handleClose);
      
      // Handle escape key
      function handleEscape(e) {
        if (e.key === 'Escape') {
          messageBox.classList.remove('show');
          cleanup();
          document.removeEventListener('keydown', handleEscape);
          resolve(false);
        }
      }
      
      document.addEventListener('keydown', handleEscape);
    });
  }

  // Load invoice data from API
  async function loadInvoiceData() {
    try {
      document.getElementById('loadingState').style.display = 'block';
      document.getElementById('errorState').style.display = 'none';
      document.getElementById('editForm').style.display = 'none';

      // Get invoice ID from URL
      const urlParts = window.location.pathname.split('/');
      currentInvoiceId = urlParts[urlParts.length - 1];
      console.log('Loading invoice with ID:', currentInvoiceId);
      
      const apiUrl = `/api/bills/${currentInvoiceId}`;
      console.log('Making API request to:', apiUrl);
      
      const response = await fetch(apiUrl);
      console.log('API response status:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('API error response:', errorText);
        throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
      }
      
      const responseData = await response.json();
      console.log('Full API response:', responseData);
      
      // Extract the bill data from the API response
      const billData = responseData.bill || responseData;
      console.log('Extracted bill data:', billData);
      
      if (!billData) {
        throw new Error('No bill data found in API response');
      }
      
      // Populate form with invoice data
      populateForm(billData);
      
      document.getElementById('loadingState').style.display = 'none';
      document.getElementById('editForm').style.display = 'block';
      
    } catch (error) {
      console.error('Error loading invoice:', error);
      document.getElementById('loadingState').style.display = 'none';
      document.getElementById('errorState').style.display = 'block';
      
      const errorMessageEl = document.getElementById('errorMessage');
      if (errorMessageEl) {
        errorMessageEl.textContent = `Failed to load invoice: ${error.message}`;
      }
    }
  }

  function populateForm(invoice) {
    console.log('Populating form with data:', invoice);
    
    // Basic invoice fields mapping (form field ID -> database field name)
    const fieldMappings = {
      'bill_number': 'bill_number',
      'invoice_date': 'invoice_date', 
      'challan_number': 'challan_number',
      'challan_date': 'challan_date',
      'po_number': 'po_number',
      'po_date': 'po_date',
      'vendor_code': 'vendor_code',
      'hsn_code': 'hsn_code',
      'dispatch_details': 'dispatch_details',
      'customer_name': 'customer_name',
      'customer_code': 'customer_code',
      'customer_phone': 'customer_phone',
      'customer_email': 'customer_email',
      'customer_address': 'customer_address',
      'customer_gst_number': 'customer_gst_number',
      'cgst_percentage': 'cgst_percentage',
      'sgst_percentage': 'sgst_percentage',
      'igst_percentage': 'igst_percentage',
      'discount_percentage': 'discount_percentage',
      'payment_method': 'payment_method',
      'payment_status': 'payment_status',
      'payment_terms': 'payment_terms',
      'notes': 'notes',
      'terms_and_conditions': 'terms_and_conditions'
    };

    // Populate basic fields
    Object.entries(fieldMappings).forEach(([elementId, invoiceKey]) => {
      const element = document.getElementById(elementId);
      if (element && invoice[invoiceKey] !== undefined && invoice[invoiceKey] !== null) {
        element.value = invoice[invoiceKey];
        console.log(`Set ${elementId} = ${invoice[invoiceKey]}`);
      }
    });

    // Handle bank details (check multiple sources)
    console.log('=== BANK DETAILS LOADING ===');
    console.log('Invoice bank_details field:', invoice.bank_details);
    console.log('Individual bank fields from invoice:');
    console.log('  bank_name:', invoice.bank_name);
    console.log('  bank_account_number:', invoice.bank_account_number);
    console.log('  bank_branch:', invoice.bank_branch);
    console.log('  bank_ifsc_code:', invoice.bank_ifsc_code);
    console.log('  bank_account_type:', invoice.bank_account_type);
    
    let bankDetails = null;
    
    // First try to get from bank_details field
    if (typeof invoice.bank_details === 'string') {
      try {
        bankDetails = JSON.parse(invoice.bank_details);
        console.log('Parsed bank_details from JSON string:', bankDetails);
      } catch (e) {
        console.warn('Failed to parse bank_details JSON:', e);
      }
    } else if (typeof invoice.bank_details === 'object' && invoice.bank_details) {
      bankDetails = invoice.bank_details;
      console.log('Using bank_details object directly:', bankDetails);
    }
    
    // If no bank_details object, try individual fields
    if (!bankDetails) {
      console.log('No bank_details object found, using individual fields');
      bankDetails = {
        bank_name: invoice.bank_name,
        account_number: invoice.bank_account_number,
        branch: invoice.bank_branch,
        ifsc_code: invoice.bank_ifsc_code,
        account_type: invoice.bank_account_type
      };
      console.log('Constructed bank details from individual fields:', bankDetails);
    }

    // Populate bank fields regardless of source
    const bankFieldMappings = {
      'bank_name': bankDetails?.bank_name || invoice.bank_name || 'INDIAN BANK',
      'bank_account_number': bankDetails?.account_number || invoice.bank_account_number || '6412057355',
      'bank_branch': bankDetails?.branch || invoice.bank_branch || 'MALAD EAST',
      'bank_ifsc_code': bankDetails?.ifsc_code || invoice.bank_ifsc_code || 'IDIB000M202',
      'bank_account_type': bankDetails?.account_type || invoice.bank_account_type || 'CURRENT A/C'
    };

    Object.entries(bankFieldMappings).forEach(([elementId, value]) => {
      const element = document.getElementById(elementId);
      if (element) {
        element.value = value || '';
        console.log(`Set ${elementId} = ${value}`);
      }
    });

    // Format and populate date fields  
    const dateFields = ['invoice_date', 'challan_date', 'po_date'];
    dateFields.forEach(field => {
      if (invoice[field]) {
        const dateEl = document.getElementById(field);
        if (dateEl) {
          try {
            const date = new Date(invoice[field]);
            dateEl.value = date.toISOString().split('T')[0];
            console.log(`Set ${field} = ${date.toISOString().split('T')[0]}`);
          } catch (e) {
            console.warn(`Failed to parse date ${field}:`, e);
          }
        }
      }
    });

    // Clear existing items and populate with invoice items
    document.getElementById('itemsList').innerHTML = '';
    itemCounter = 0;

    if (invoice.items && Array.isArray(invoice.items) && invoice.items.length > 0) {
      console.log('Loading items:', invoice.items);
      invoice.items.forEach(item => {
        addItemWithData(item);
      });
    } else {
      console.log('No items found, adding empty item');
      // Add one empty item if no items exist
      addItem();
    }

    // Calculate totals
    calculateTotals();
    console.log('Form population completed');
  }

  function addItem() {
    addItemWithData({});
  }

  function addItemWithData(itemData = {}) {
    // Check if we've reached the maximum number of items
    const currentItemCount = document.querySelectorAll('.item-row').length;
    
    if (currentItemCount >= MAX_ITEMS) {
      showMessage('warning', 'Item Limit Reached', `You can only add a maximum of ${MAX_ITEMS} items to an invoice.`);
      return;
    }
    
    itemCounter++;
    const itemsList = document.getElementById('itemsList');
    const itemRow = document.createElement('div');
    itemRow.className = 'item-row';
    itemRow.dataset.itemId = itemCounter;
    itemRow.style.cssText = `
      display: grid !important;
      grid-template-columns: 80px 2fr 140px 100px 140px 100px !important;
      gap: 15px !important;
      padding: 15px 20px !important;
      border-bottom: 1px solid #f1f3f4 !important;
      align-items: center !important;
      background: white !important;
      transition: background-color 0.2s ease;
    `;
    
    itemRow.innerHTML = `
      <span class="sr-no" style="
        font-weight: 600 !important;
        font-size: 16px !important;
        color: #3498db !important;
        text-align: center !important;
        background: linear-gradient(135deg, #f8fbff 0%, #e3f2fd 100%) !important;
        padding: 8px !important;
        border-radius: 6px !important;
        border: 1px solid #e3f2fd !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
      ">${itemCounter}</span>
      <input type="text" name="items[${itemCounter}][product_description]" placeholder="Item description" required
        class="item-description" value="${itemData.product_description || itemData.product_name || ''}"
        style="
          padding: 12px !important;
          border: 1px solid #dee2e6 !important;
          border-radius: 6px !important;
          font-size: 14px !important;
          font-weight: 500 !important;
          transition: all 0.3s ease !important;
          background: white !important;
          color: #495057 !important;
          width: 100% !important;
          box-sizing: border-box !important;
        ">
      <input type="number" name="items[${itemCounter}][unit_price]" placeholder="450.00" required step="0.01"
        class="item-unit-price" value="${itemData.unit_price || ''}"
        style="
          padding: 12px !important;
          border: 1px solid #dee2e6 !important;
          border-radius: 6px !important;
          font-size: 14px !important;
          font-weight: 500 !important;
          transition: all 0.3s ease !important;
          background: white !important;
          color: #495057 !important;
          width: 100% !important;
          box-sizing: border-box !important;
        ">
      <input type="text" name="items[${itemCounter}][quantity]" placeholder="e.g., 2, 1 PC, 5 units" required
        class="item-quantity" value="${itemData.quantity || ''}"
        style="
          padding: 12px !important;
          border: 1px solid #dee2e6 !important;
          border-radius: 6px !important;
          font-size: 14px !important;
          font-weight: 500 !important;
          transition: all 0.3s ease !important;
          background: white !important;
          color: #495057 !important;
          width: 100% !important;
          box-sizing: border-box !important;
        ">
      <span class="item-total" style="
        font-weight: 600 !important;
        font-size: 15px !important;
        color: #27ae60 !important;
        text-align: center !important;
        padding: 12px 8px !important;
        background: linear-gradient(135deg, #f8fff9 0%, #e8f5e8 100%) !important;
        border-radius: 6px !important;
        border: 1px solid #d4edda !important;
        min-width: 100px !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
      ">‚Çπ${(itemData.total_price || 0).toFixed(2)}</span>
      <button type="button" class="remove-item" style="
        background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%) !important;
        color: white !important;
        border: none !important;
        padding: 10px 12px !important;
        border-radius: 6px !important;
        cursor: pointer !important;
        font-size: 14px !important;
        font-weight: 600 !important;
        transition: all 0.3s ease !important;
        box-shadow: 0 2px 4px rgba(231, 76, 60, 0.2) !important;
      ">‚úï</button>
    `;
    
    itemsList.appendChild(itemRow);
    setupItemRowEventListeners(itemRow);
    updateAddItemButton();
    calculateTotals();
  }

  function removeItem(button) {
    const itemRow = button.parentElement;
    itemRow.remove();
    renumberItems();
    updateAddItemButton();
    calculateTotals();
  }

  function renumberItems() {
    const itemRows = document.querySelectorAll('.item-row');
    
    itemRows.forEach((row, index) => {
      const srNoSpan = row.querySelector('.sr-no');
      if (srNoSpan) {
        srNoSpan.textContent = index + 1;
      }
      
      const inputs = row.querySelectorAll('input');
      inputs.forEach(input => {
        if (input.name) {
          input.name = input.name.replace(/\[\d+\]/, `[${index + 1}]`);
        }
      });
      
      row.dataset.itemId = index + 1;
      setupItemRowEventListeners(row);
    });
    
    itemCounter = itemRows.length;
    updateAddItemButton();
  }

  function updateAddItemButton() {
    const addItemBtn = document.getElementById('addItemBtn');
    const currentItemCount = document.querySelectorAll('.item-row').length;
    
    if (addItemBtn) {
      if (currentItemCount >= MAX_ITEMS) {
        addItemBtn.textContent = `Maximum ${MAX_ITEMS} Items Reached`;
        addItemBtn.disabled = true;
        addItemBtn.style.opacity = '0.6';
        addItemBtn.style.cursor = 'not-allowed';
        addItemBtn.style.background = 'linear-gradient(135deg, #95a5a6 0%, #7f8c8d 100%)';
      } else {
        addItemBtn.textContent = `+ Add Item (${currentItemCount}/${MAX_ITEMS})`;
        addItemBtn.disabled = false;
        addItemBtn.style.opacity = '1';
        addItemBtn.style.cursor = 'pointer';
        addItemBtn.style.background = 'linear-gradient(135deg, #27ae60 0%, #229954 100%)';
      }
    }
  }

  function setupItemRowEventListeners(itemRow) {
    const unitPriceInput = itemRow.querySelector('.item-unit-price');
    const quantityInput = itemRow.querySelector('.item-quantity');
    const removeBtn = itemRow.querySelector('.remove-item');
    
    if (unitPriceInput) {
      unitPriceInput.addEventListener('change', function() {
        calculateItemTotalByRow(itemRow);
      });
      unitPriceInput.addEventListener('input', function() {
        calculateItemTotalByRow(itemRow);
      });
    }
    
    if (quantityInput) {
      quantityInput.addEventListener('change', function() {
        calculateItemTotalByRow(itemRow);
      });
      quantityInput.addEventListener('input', function() {
        calculateItemTotalByRow(itemRow);
      });
    }
    
    if (removeBtn) {
      removeBtn.addEventListener('click', function() {
        removeItem(this);
      });
    }
  }

  function calculateItemTotalByRow(itemRow) {
    const unitPriceInput = itemRow.querySelector('.item-unit-price');
    const quantityInput = itemRow.querySelector('.item-quantity');
    const totalSpan = itemRow.querySelector('.item-total');
    
    if (unitPriceInput && quantityInput && totalSpan) {
      const unitPrice = parseFloat(unitPriceInput.value) || 0;
      const quantity = extractNumericValue(quantityInput.value);
      const total = unitPrice * quantity;
      
      totalSpan.textContent = `‚Çπ${total.toFixed(2)}`;
      calculateTotals();
    }
  }

  function calculateTotals() {
    let subtotal = 0;
    
    document.querySelectorAll('.item-total').forEach((element) => {
      const valueText = element.textContent.replace('‚Çπ', '').replace(',', '').trim();
      const value = parseFloat(valueText) || 0;
      subtotal += value;
    });

    const cgstPercentage = parseFloat(document.getElementById('cgst_percentage')?.value) || 0;
    const sgstPercentage = parseFloat(document.getElementById('sgst_percentage')?.value) || 0;
    const igstPercentage = parseFloat(document.getElementById('igst_percentage')?.value) || 0;
    const discountPercentage = parseFloat(document.getElementById('discount_percentage')?.value) || 0;

    const cgstAmount = (subtotal * cgstPercentage) / 100;
    const sgstAmount = (subtotal * sgstPercentage) / 100;
    const igstAmount = (subtotal * igstPercentage) / 100;
    const discountAmount = (subtotal * discountPercentage) / 100;
    
    const totalAmount = subtotal + cgstAmount + sgstAmount + igstAmount - discountAmount;

    const updateElement = (id, value) => {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = `‚Çπ${value.toFixed(2)}`;
      }
    };

    updateElement('subtotalDisplay', subtotal);
    updateElement('cgstDisplay', cgstAmount);
    updateElement('sgstDisplay', sgstAmount);
    updateElement('igstDisplay', igstAmount);
    updateElement('discountDisplay', discountAmount);
    updateElement('totalDisplay', totalAmount);
  }

  // Check authentication and load invoice data on page load
  document.addEventListener('DOMContentLoaded', function() {
    if (localStorage.getItem(AUTH_CONFIG.SESSION_KEY) !== 'true') {
      window.location.href = AUTH_CONFIG.REDIRECT_PATHS.LOGIN;
      return;
    }

    // Load invoice data
    loadInvoiceData();

    // Setup form event listeners
    const addItemBtn = document.getElementById('addItemBtn');
    if (addItemBtn) {
      addItemBtn.addEventListener('click', addItem);
    }

    ['cgst_percentage', 'sgst_percentage', 'igst_percentage', 'discount_percentage'].forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        element.addEventListener('change', calculateTotals);
        element.addEventListener('input', calculateTotals);
      }
    });
  });

  // Form submission
  document.getElementById('invoiceForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    showLoader('Updating Invoice...');
    
    try {
      const formData = new FormData(this);
      const invoiceData = Object.fromEntries(formData.entries());
      
      // Collect items data
      const items = [];
      const itemRows = document.querySelectorAll('.item-row');
      
      console.log('=== COLLECTING ITEMS FROM DOM ===');
      console.log('Found item rows:', itemRows.length);
      
      itemRows.forEach((row, index) => {
        console.log(`Processing item row ${index + 1}:`);
        
        // Try multiple selectors to ensure we find the inputs
        const descriptionInput = row.querySelector('.item-description') || 
                                row.querySelector('input[name*="product_description"]');
        const unitPriceInput = row.querySelector('.item-unit-price') || 
                              row.querySelector('input[name*="unit_price"]');
        const quantityInput = row.querySelector('.item-quantity') || 
                             row.querySelector('input[name*="quantity"]');
        
        console.log(`  Description input:`, descriptionInput?.value);
        console.log(`  Unit price input:`, unitPriceInput?.value);
        console.log(`  Quantity input:`, quantityInput?.value);
        
        if (descriptionInput && descriptionInput.value.trim()) {
          const unitPrice = parseFloat(unitPriceInput?.value) || 0;
          const quantityText = quantityInput?.value.trim() || '0';
          const quantityNumeric = extractNumericValue(quantityText);
          const totalPrice = unitPrice * quantityNumeric;
          
          const item = {
            sr_no: index + 1,
            product_name: descriptionInput.value.trim(),
            product_description: descriptionInput.value.trim(),
            product_category: 'General',
            hsn_code: '',
            unit_price: unitPrice,
            quantity: quantityText, // Store the full text
            total_price: totalPrice, // Calculate using numeric value
            unit: 'Nos'
          };
          
          console.log(`  Adding item:`, item);
          items.push(item);
        } else {
          console.log(`  Skipping row ${index + 1} - no description or description empty`);
        }
      });
      
      console.log('=== ITEMS COLLECTION SUMMARY ===');
      console.log('Total items collected:', items.length);
      console.log('Items array:', items);
      
      if (items.length === 0) {
        hideLoader();
        console.error('No items found to update invoice with');
        await showMessage('warning', 'Missing Items', 'Please add at least one item to the invoice. Make sure all item fields (description, price, quantity) are filled.');
        return;
      }
      
      // Calculate totals
      const subtotal = items.reduce((sum, item) => sum + item.total_price, 0);
      const cgstPercentage = parseFloat(document.getElementById('cgst_percentage').value) || 0;
      const sgstPercentage = parseFloat(document.getElementById('sgst_percentage').value) || 0;
      const igstPercentage = parseFloat(document.getElementById('igst_percentage').value) || 0;
      const discountPercentage = parseFloat(document.getElementById('discount_percentage').value) || 0;
      
      const cgstAmount = (subtotal * cgstPercentage) / 100;
      const sgstAmount = (subtotal * sgstPercentage) / 100;
      const igstAmount = (subtotal * igstPercentage) / 100;
      const discountAmount = (subtotal * discountPercentage) / 100;
      const totalTaxAmount = cgstAmount + sgstAmount + igstAmount;
      const totalAmount = subtotal + totalTaxAmount - discountAmount;
      
      // Prepare update data
      invoiceData.items = items;
      invoiceData.subtotal = subtotal;
      invoiceData.cgst_amount = cgstAmount;
      invoiceData.sgst_amount = sgstAmount;
      invoiceData.igst_amount = igstAmount;
      invoiceData.total_tax_amount = totalTaxAmount;
      invoiceData.discount_amount = discountAmount;
      invoiceData.total_amount = totalAmount;
      
      // Structure bank details
      invoiceData.bank_details = {
        bank_name: invoiceData.bank_name || '',
        account_number: invoiceData.bank_account_number || '',
        branch: invoiceData.bank_branch || '',
        ifsc_code: invoiceData.bank_ifsc_code || '',
        account_type: invoiceData.bank_account_type || ''
      };
      
      console.log('=== BANK DETAILS PROCESSING ===');
      console.log('Original bank fields from form:');
      console.log('  bank_name:', invoiceData.bank_name);
      console.log('  bank_account_number:', invoiceData.bank_account_number);
      console.log('  bank_branch:', invoiceData.bank_branch);
      console.log('  bank_ifsc_code:', invoiceData.bank_ifsc_code);
      console.log('  bank_account_type:', invoiceData.bank_account_type);
      console.log('Structured bank_details object:', invoiceData.bank_details);
      
      // Clean up flat bank fields
      delete invoiceData.bank_name;
      delete invoiceData.bank_account_number;
      delete invoiceData.bank_branch;
      delete invoiceData.bank_ifsc_code;
      delete invoiceData.bank_account_type;
      
      // Remove flat item fields
      Object.keys(invoiceData).forEach(key => {
        if (key.startsWith('items[') && key.includes('][')) {
          delete invoiceData[key];
        }
      });
      
      invoiceData.updated_at = new Date().toISOString();
      
      console.log('=== FINAL UPDATE DATA ===');
      console.log('Items count:', invoiceData.items?.length || 0);
      console.log('Items data:', invoiceData.items);
      console.log('Full payload:', JSON.stringify(invoiceData, null, 2));
      
      // Submit update
      const response = await fetch(`/api/bills/${currentInvoiceId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(invoiceData)
      });
      
      hideLoader();
      
      if (response.ok) {
        const result = await response.json();
        await showMessage('success', 'Success!', `Invoice  has been updated successfully!`);
        window.location.href = '/bills';
      } else {
        const errorData = await response.json().catch(() => ({}));
        await showMessage('error', 'Error', `Failed to update invoice: ${errorData.error || 'Unknown error'}`);
      }
    } catch (error) {
      hideLoader();
      console.error('Invoice update error:', error);
      await showMessage('error', 'Error', `Error updating invoice: ${error.message}`);
    }
  });

  function logout() {
    localStorage.removeItem(AUTH_CONFIG.SESSION_KEY);
    showMessage('success', 'Logged Out', 'You have been logged out successfully.').then(() => {
      window.location.href = AUTH_CONFIG.REDIRECT_PATHS.LOGIN;
    });
  }

  // Make functions available globally
  window.logout = logout;
  window.loadInvoiceData = loadInvoiceData;
  window.addItem = addItem;
  window.removeItem = removeItem;
  window.calculateTotals = calculateTotals;

  // Utility function to extract numeric value from text (e.g., "1 PC" -> 1)
  function extractNumericValue(value) {
    if (!value) return 0;
    if (typeof value === 'number') return value;
    
    // Convert to string and extract numbers
    const str = String(value);
    const matches = str.match(/\d+(?:\.\d+)?/);
    return matches ? parseFloat(matches[0]) : 0;
  }
</script>
