---
import Layout from "../../layouts/Layout.astro";
import { AUTH_CONFIG } from "../../config/auth.js";
---

<Layout title="Create New Invoice - Shagoon Chair">
  <main>
    <div class="page-header">
      <h1>Create New Invoice</h1>
      <div class="header-actions">
        <a href="/bills" class="btn btn-outline">‚Üê Back to Bills</a>
        <button onclick="logout()" class="btn btn-danger">üö™ Logout</button>
      </div>
    </div>

    <form id="invoiceForm" class="invoice-form">
      <div class="form-grid">
        <!-- Invoice Details Section -->
        <section class="form-section">
          <h2>üìã Invoice Details</h2>
          <div class="form-row">
            <div class="form-group">
              <label for="invoice_date">Invoice Date *</label>
              <input
                type="date"
                id="invoice_date"
                name="invoice_date"
                required
              />
            </div>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label for="challan_number">Challan Number</label>
              <input
                type="text"
                id="challan_number"
                name="challan_number"
                placeholder="e.g., CH-001"
              />
            </div>
            <div class="form-group">
              <label for="challan_date">Challan Date</label>
              <input type="date" id="challan_date" name="challan_date" />
            </div>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label for="po_number">P.O. Number</label>
              <input
                type="text"
                id="po_number"
                name="po_number"
                placeholder="e.g., PO-2025-001"
              />
            </div>
            <div class="form-group">
              <label for="po_date">P.O. Date</label>
              <input type="date" id="po_date" name="po_date" />
            </div>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label for="vendor_code">Vendor Code</label>
              <input
                type="text"
                id="vendor_code"
                name="vendor_code"
                placeholder="e.g., VEN001"
              />
            </div>
            <div class="form-group">
              <label for="hsn_code">HSN Code</label>
              <input
                type="text"
                id="hsn_code"
                name="hsn_code"
                placeholder="e.g., 9403"
              />
            </div>
          </div>
          <div class="form-group">
            <label for="dispatch_details">Dispatch Details</label>
            <textarea
              id="dispatch_details"
              name="dispatch_details"
              rows="2"
              placeholder="e.g., Dispatched through XYZ Transport, Vehicle No. MH-01-AB-1234"
            ></textarea>
          </div>
        </section>

        <!-- Customer Details Section -->
        <section class="form-section">
          <h2>üë§ Customer Details</h2>
          <div class="form-row">
            <div class="form-group autocomplete-container">
              <label for="customer_name">Customer Name *</label>
              <input
                type="text"
                id="customer_name"
                name="customer_name"
                required
                placeholder="e.g., M/S. CUPS AND MOULDS LLP."
                autocomplete="off"
              />
              <div id="customerSuggestions" class="suggestions-list"></div>
            </div>
            <div class="form-group">
              <label for="customer_code">Customer Code</label>
              <input
                type="number"
                id="customer_code"
                name="customer_code"
                placeholder="e.g., 1001"
              />
            </div>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label for="customer_phone">Phone Number *</label>
              <input
                type="tel"
                id="customer_phone"
                name="customer_phone"
                required
                placeholder="+91 9820732807"
              />
            </div>
            <div class="form-group">
              <label for="customer_email">Email</label>
              <input
                type="email"
                id="customer_email"
                name="customer_email"
                placeholder="customer@example.com"
              />
            </div>
          </div>
          <div class="form-group">
            <label for="customer_address">Customer Address *</label>
            <textarea
              id="customer_address"
              name="customer_address"
              required
              rows="3"
              placeholder="Complete billing address"></textarea>
          </div>
          <div class="form-group">
            <label for="customer_gst_number">Customer GST Number</label>
            <input
              type="text"
              id="customer_gst_number"
              name="customer_gst_number"
              placeholder="27AAQFC3444C1ZK"
            />
          </div>
        </section>
      </div>

      <!-- Items Section -->
      <section class="form-section">
        <h2>üõçÔ∏è Invoice Items</h2>
        <div class="items-container">
          <div class="items-header">
            <span>Sr. No</span>
            <span>Description</span>
            <span>Unit Price (‚Çπ)</span>
            <span>Qty</span>
            <span>Amount (‚Çπ)</span>
            <span>Action</span>
          </div>
          <div id="itemsList">
            <!-- Items will be dynamically added here -->
          </div>
          <button type="button" id="addItemBtn" class="btn btn-success"
            >+ Add Item</button
          >
        </div>
      </section>

      <!-- Tax & Payment Section -->
      <div class="form-grid">
        <section class="form-section">
          <h2>üí∞ Tax Calculation</h2>
          <div class="form-row">
            <div class="form-group">
              <label for="cgst_percentage">CGST % *</label>
              <input
                type="number"
                id="cgst_percentage"
                name="cgst_percentage"
                value="9"
                step="0.01"
                required
              />
            </div>
            <div class="form-group">
              <label for="sgst_percentage">SGST % *</label>
              <input
                type="number"
                id="sgst_percentage"
                name="sgst_percentage"
                value="9"
                step="0.01"
                required
              />
            </div>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label for="igst_percentage">IGST %</label>
              <input
                type="number"
                id="igst_percentage"
                name="igst_percentage"
                value="0"
                step="0.01"
              />
            </div>
            <div class="form-group">
              <label for="discount_percentage">Discount %</label>
              <input
                type="number"
                id="discount_percentage"
                name="discount_percentage"
                value="0"
                step="0.01"
              />
            </div>
          </div>

          <div class="calculation-summary">
            <div class="calc-row">
              <span>Subtotal:</span>
              <span id="subtotalDisplay">‚Çπ0.00</span>
            </div>
            <div class="calc-row">
              <span>CGST:</span>
              <span id="cgstDisplay">‚Çπ0.00</span>
            </div>
            <div class="calc-row">
              <span>SGST:</span>
              <span id="sgstDisplay">‚Çπ0.00</span>
            </div>
            <div class="calc-row">
              <span>IGST:</span>
              <span id="igstDisplay">‚Çπ0.00</span>
            </div>
            <div class="calc-row">
              <span>Discount:</span>
              <span id="discountDisplay">‚Çπ0.00</span>
            </div>
            <div class="calc-row total-row">
              <span><strong>Total Amount:</strong></span>
              <span id="totalDisplay"><strong>‚Çπ0.00</strong></span>
            </div>
          </div>
        </section>

        <section class="form-section">
          <h2>üí≥ Payment Details</h2>
          <div class="form-group">
            <label for="payment_method">Payment Method *</label>
            <select id="payment_method" name="payment_method" required>
              <option value="cash">Cash</option>
              <option value="card">Card</option>
              <option value="upi">UPI</option>
              <option value="bank_transfer">Bank Transfer</option>
              <option value="cheque">Cheque</option>
              <option value="dd">Demand Draft</option>
            </select>
          </div>
          <div class="form-group">
            <label for="payment_status">Payment Status *</label>
            <select id="payment_status" name="payment_status" required>
              <option value="pending">Pending</option>
              <option value="paid">Paid</option>
            </select>
          </div>
          <div class="form-group">
            <label for="payment_terms">Payment Terms</label>
            <textarea id="payment_terms" name="payment_terms" rows="2"
              >PAYMENT ONLY BY CROSSED CHEQUES / DD PAYABLE IN MUMBAI</textarea
            >
          </div>
        </section>
      </div>

      <!-- Bank Details Section -->
      <section class="form-section">
        <h2>üè¶ Bank Details</h2>
        <div class="form-grid">
          <div class="form-group">
            <label for="bank_name">Bank Name</label>
            <input
              type="text"
              id="bank_name"
              name="bank_name"
              value="INDIAN BANK"
            />
          </div>
          <div class="form-group">
            <label for="bank_account_number">Account Number</label>
            <input
              type="text"
              id="bank_account_number"
              name="bank_account_number"
              value="6412057355"
            />
          </div>
          <div class="form-group">
            <label for="bank_branch">Branch</label>
            <input
              type="text"
              id="bank_branch"
              name="bank_branch"
              value="MALAD EAST"
            />
          </div>
          <div class="form-group">
            <label for="bank_ifsc_code">IFSC Code</label>
            <input
              type="text"
              id="bank_ifsc_code"
              name="bank_ifsc_code"
              value="IDIB000M202"
            />
          </div>
          <div class="form-group">
            <label for="bank_account_type">Account Type</label>
            <input
              type="text"
              id="bank_account_type"
              name="bank_account_type"
              value="CURRENT A/C"
            />
          </div>
        </div>
      </section>

      <!-- Notes Section -->
      <section class="form-section">
        <h2>üìù Additional Notes</h2>
        <div class="form-group">
          <label for="notes">Notes</label>
          <textarea
            id="notes"
            name="notes"
            rows="3"
            placeholder="Any additional notes or comments"></textarea>
        </div>
      </section>

            <!-- Terms and Conditions Section -->
      <section class="form-section">
        <h2>üìã Terms and Conditions</h2>
        <div class="form-group">
          <label for="terms_and_conditions">Terms and Conditions</label>
          <textarea id="terms_and_conditions" name="terms_and_conditions" rows="6">‚Ä¢ Price including Fabric/guts-Tax per Mtr. Party will have to give Two alternative.
‚Ä¢ Inspection prior to dispatch if desire will be at our factory premises.
‚Ä¢ 50% advance with confirm order & balance against delivery.
‚Ä¢ Warranty period 12 Months against manufacturing defect.
‚Ä¢ Payment of the bill must every month of 15th.
‚Ä¢ Interest will be charged @ 20% on all accounts remaining unpaid after credit time.</textarea>
        </div>
      </section>

      <!-- Form Actions -->
      <div class="form-actions">
        <button type="submit" class="btn btn-primary" id="submitBtn"
          >üí∞ Create Invoice</button
        >
        <button type="reset" class="btn btn-outline">üîÑ Reset Form</button>
      </div>
    </form>

    <!-- Loading Overlay -->
    <div id="loadingOverlay" class="loading-overlay">
      <div class="loading-content">
        <div class="spinner"></div>
        <p>Creating Invoice...</p>
      </div>
    </div>

    <!-- Message Box -->
    <div id="messageBox" class="message-box">
      <div class="message-content">
        <div class="message-header">
          <span id="messageTitle">Message</span>
          <button id="messageClose" class="message-close">√ó</button>
        </div>
        <div class="message-body">
          <div id="messageIcon" class="message-icon"></div>
          <div id="messageText" class="message-text"></div>
        </div>
        <div class="message-actions">
          <button id="messageOk" class="btn btn-primary">OK</button>
          <button
            id="messageCancel"
            class="btn btn-outline"
            style="display: none;">Cancel</button
          >
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  @import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap");

  :root {
    --primary-color: #3498db;
    --secondary-color: #2c3e50;
    --success-color: #27ae60;
    --danger-color: #e74c3c;
    --warning-color: #f39c12;
    --light-color: #ecf0f1;
    --dark-color: #2c3e50;
    --font-family: "Inter", sans-serif;
    --border-radius: 8px;
    --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  body {
    font-family: var(--font-family);
    background-color: #f4f7f9;
  }

  .page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: white;
    padding: 20px;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    margin-bottom: 20px;
  }

  .page-header h1 {
    margin: 0;
    color: var(--secondary-color);
    font-weight: 700;
  }

  .header-actions {
    display: flex;
    gap: 10px;
  }

  .invoice-form {
    background: white;
    padding: 30px;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
  }

  .form-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
  }

  .form-section {
    margin-bottom: 30px;
  }

  .form-section h2 {
    color: var(--secondary-color);
    border-bottom: 2px solid var(--primary-color);
    padding-bottom: 10px;
    margin-bottom: 20px;
    display: flex;
    align-items: center;
    gap: 8px;
    font-weight: 600;
  }

  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
  }

  .form-group {
    margin-bottom: 15px;
  }

  .autocomplete-container {
    position: relative;
  }

  .suggestions-list {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border: 1px solid #ddd;
    border-top: none;
    border-radius: 0 0 6px 6px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    max-height: 250px;
    overflow-y: auto;
  }

  .suggestion-item {
    padding: 12px 15px;
    cursor: pointer;
    font-size: 14px;
    border-bottom: 1px solid #f1f3f4;
  }

  .suggestion-item:last-child {
    border-bottom: none;
  }

  .suggestion-item:hover,
  .suggestion-item.active {
    background-color: #f8f9fa;
  }

  .form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: 600;
    color: var(--secondary-color);
  }

  .form-group input,
  .form-group textarea,
  .form-group select {
    width: 100%;
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 14px;
    transition: all 0.3s ease;
    font-family: var(--font-family);
  }

  .form-group input:focus,
  .form-group textarea:focus,
  .form-group select:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
  }

  .items-container {
    border: 1px solid #ddd;
    border-radius: var(--border-radius);
    overflow: hidden;
    margin-bottom: 20px;
  }

  .items-header {
    display: grid;
    grid-template-columns: 40px 2fr 1fr 1fr 1fr 80px;
    gap: 15px;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    padding: 15px 20px;
    font-weight: 600;
    font-size: 14px;
    border-bottom: 2px solid #dee2e6;
    text-align: center;
    color: #495057;
    align-items: center;
  }

  .item-row {
    display: grid !important;
    grid-template-columns: 40px 2fr 1fr 1fr 1fr 80px !important;
    gap: 15px !important;
    padding: 15px 20px !important;
    border-bottom: 1px solid #f1f3f4 !important;
    align-items: center !important;
    background: white !important;
    transition: background-color 0.2s ease;
  }

  .item-row:hover {
    background: #fafbfc;
  }

  .item-row:last-child {
    border-bottom: none;
  }

  .item-row input,
  .item-row select {
    padding: 12px !important;
    border: 1px solid #dee2e6 !important;
    border-radius: 6px !important;
    font-size: 14px !important;
    font-weight: 500 !important;
    transition: all 0.3s ease !important;
    background: white !important;
    color: #495057 !important;
    width: 100% !important;
    box-sizing: border-box !important;
  }

  .item-row input:focus,
  .item-row select:focus {
    outline: none !important;
    border-color: var(--primary-color) !important;
    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1) !important;
    background: #fff !important;
  }

  .item-row input::placeholder {
    color: #adb5bd !important;
    font-weight: 400 !important;
  }

  .item-total {
    font-weight: 600 !important;
    font-size: 15px !important;
    color: var(--success-color) !important;
    text-align: center !important;
    padding: 12px 8px !important;
    background: linear-gradient(135deg, #f8fff9 0%, #e8f5e8 100%) !important;
    border-radius: 6px !important;
    border: 1px solid #d4edda !important;
    min-width: 100px !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
  }

  .sr-no {
    font-weight: 600 !important;
    font-size: 16px !important;
    color: var(--primary-color) !important;
    text-align: center !important;
    background: linear-gradient(135deg, #f8fbff 0%, #e3f2fd 100%) !important;
    padding: 8px !important;
    border-radius: 6px !important;
    border: 1px solid #e3f2fd !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
  }

  .calculation-summary {
    background: #f8f9fa;
    padding: 20px;
    border-radius: var(--border-radius);
    margin-top: 15px;
  }

  .calc-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
    padding: 4px 0;
    font-size: 14px;
  }

  .total-row {
    border-top: 2px solid var(--primary-color);
    padding-top: 10px;
    margin-top: 10px;
    font-size: 16px;
    font-weight: 700;
  }

  .btn {
    padding: 12px 24px;
    border: none;
    border-radius: 6px;
    text-decoration: none;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 8px;
  }

  .btn-primary {
    background: var(--primary-color);
    color: white;
  }

  .btn-secondary {
    background: #95a5a6;
    color: white;
  }

  .btn-success {
    background: var(--success-color);
    color: white;
  }

  .btn-danger {
    background: var(--danger-color);
    color: white;
  }

  .btn-outline {
    background: transparent;
    color: var(--secondary-color);
    border: 1px solid var(--secondary-color);
  }

  .btn-sm {
    padding: 8px 16px;
    font-size: 12px;
  }

  .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
  }

  .form-actions {
    display: flex;
    gap: 15px;
    justify-content: center;
    padding-top: 20px;
    border-top: 1px solid #eee;
    margin-top: 20px;
  }

  .remove-item {
    background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
    color: white;
    border: none;
    padding: 10px 12px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(231, 76, 60, 0.2);
  }

  .remove-item:hover {
    background: linear-gradient(135deg, #c0392b 0%, #a93226 100%);
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(231, 76, 60, 0.3);
  }

  .btn.btn-success {
    background: linear-gradient(135deg, #27ae60 0%, #229954 100%);
    color: white;
    padding: 12px 24px;
    margin-top: 15px;
    font-weight: 600;
    box-shadow: 0 3px 6px rgba(39, 174, 96, 0.2);
    transition: all 0.3s ease;
  }

  .btn.btn-success:hover:not(:disabled) {
    background: linear-gradient(135deg, #229954 0%, #1e8449 100%);
    transform: translateY(-2px);
    box-shadow: 0 5px 12px rgba(39, 174, 96, 0.3);
  }

  .btn.btn-success:disabled {
    background: linear-gradient(135deg, #95a5a6 0%, #7f8c8d 100%) !important;
    cursor: not-allowed !important;
    opacity: 0.6 !important;
    transform: none !important;
    box-shadow: 0 2px 4px rgba(149, 165, 166, 0.2) !important;
  }

  .btn.btn-success:disabled:hover {
    transform: none !important;
    box-shadow: 0 2px 4px rgba(149, 165, 166, 0.2) !important;
  }

  @media (max-width: 768px) {
    .page-header {
      flex-direction: column;
      gap: 15px;
      text-align: center;
    }

    .form-grid {
      grid-template-columns: 1fr;
    }

    .form-row {
      grid-template-columns: 1fr;
    }

    .items-container {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
    }

    .items-header,
    .item-row {
      min-width: 750px;
    }

    .items-container::after {
      content: "‚Üê Scroll horizontally to view all columns ‚Üí";
      display: block;
      text-align: center;
      padding: 8px;
      background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
      color: #856404;
      font-size: 12px;
      font-weight: 500;
      border-top: 1px solid #f0e68c;
    }

    .form-actions {
      flex-direction: column;
    }

    .form-group input,
    .form-group textarea,
    .form-group select {
      font-size: 16px;
    }
  }

  .loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    backdrop-filter: blur(4px);
  }

  .loading-overlay.show {
    display: flex;
  }

  .loading-content {
    background: white;
    padding: 40px;
    border-radius: 12px;
    text-align: center;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    min-width: 300px;
  }

  .spinner {
    width: 50px;
    height: 50px;
    border: 5px solid #f3f3f3;
    border-top: 5px solid var(--primary-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 20px;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .loading-content p {
    margin: 0;
    font-size: 16px;
    color: var(--secondary-color);
    font-weight: 500;
  }

  .message-box {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 10000;
    backdrop-filter: blur(4px);
  }

  .message-box.show {
    display: flex;
  }

  .message-content {
    background: white;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    min-width: 400px;
    max-width: 500px;
    overflow: hidden;
    animation: messageSlideIn 0.3s ease-out;
  }

  @keyframes messageSlideIn {
    from {
      transform: translateY(-50px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  .message-header {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    padding: 20px 25px;
    border-bottom: 1px solid #dee2e6;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .message-header span {
    font-weight: 600;
    font-size: 18px;
    color: var(--secondary-color);
  }

  .message-close {
    background: none;
    border: none;
    font-size: 24px;
    color: #6c757d;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: all 0.2s ease;
  }

  .message-close:hover {
    background: #e9ecef;
    color: #495057;
  }

  .message-body {
    padding: 30px 25px;
    display: flex;
    align-items: flex-start;
    gap: 20px;
  }

  .message-icon {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    flex-shrink: 0;
  }

  .message-icon.success {
    background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
    color: #155724;
  }

  .message-icon.success::before {
    content: "‚úì";
  }

  .message-icon.error {
    background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
    color: #721c24;
  }

  .message-icon.error::before {
    content: "‚úï";
  }

  .message-icon.warning {
    background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
    color: #856404;
  }

  .message-icon.warning::before {
    content: "‚ö†";
  }

  .message-icon.info {
    background: linear-gradient(135deg, #d1ecf1 0%, #bee5eb 100%);
    color: #0c5460;
  }

  .message-icon.info::before {
    content: "‚Ñπ";
  }

  .message-text {
    flex: 1;
    font-size: 16px;
    line-height: 1.5;
    color: #495057;
  }

  .message-actions {
    padding: 20px 25px;
    border-top: 1px solid #dee2e6;
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    background: #f8f9fa;
  }

  .message-actions .btn {
    min-width: 80px;
  }

  @media (max-width: 768px) {
    .message-content {
      min-width: auto;
      max-width: 90%;
      margin: 20px;
    }

    .loading-content {
      min-width: auto;
      max-width: 90%;
      margin: 20px;
      padding: 30px 20px;
    }
  }
</style>

<script define:vars={{ AUTH_CONFIG }}>
  document.addEventListener("DOMContentLoaded", () => {
    // Authenticate user
    if (localStorage.getItem(AUTH_CONFIG.SESSION_KEY) !== "true") {
      window.location.href = AUTH_CONFIG.REDIRECT_PATHS.LOGIN;
      return;
    }

    // UI Elements
    const invoiceForm = document.getElementById("invoiceForm");
    const itemsList = document.getElementById("itemsList");
    const addItemBtn = document.getElementById("addItemBtn");
    const customerNameInput = document.getElementById("customer_name");
    const suggestionsContainer = document.getElementById("customerSuggestions");
    const taxInputs = [
      "cgst_percentage",
      "sgst_percentage",
      "igst_percentage",
      "discount_percentage",
    ];

    // Constants
    const MAX_ITEMS = 15;
    let itemCounter = 0;
    let debounceTimer;

    // Functions
    const showLoader = (message = "Processing...") => {
      const overlay = document.getElementById("loadingOverlay");
      overlay.querySelector("p").textContent = message;
      overlay.classList.add("show");
      document.getElementById("submitBtn").disabled = true;
    };

    const hideLoader = () => {
      const overlay = document.getElementById("loadingOverlay");
      overlay.classList.remove("show");
      document.getElementById("submitBtn").disabled = false;
    };

    const showMessage = (type, title, message, showCancel = false) => {
      return new Promise((resolve) => {
        const messageBox = document.getElementById("messageBox");
        const messageTitle = document.getElementById("messageTitle");
        const messageIcon = document.getElementById("messageIcon");
        const messageText = document.getElementById("messageText");
        const messageOk = document.getElementById("messageOk");
        const messageCancel = document.getElementById("messageCancel");
        const messageClose = document.getElementById("messageClose");

        messageTitle.textContent = title;
        messageText.textContent = message;
        messageIcon.className = `message-icon ${type}`;
        messageCancel.style.display = showCancel ? "inline-flex" : "none";
        messageOk.textContent = showCancel ? "Yes" : "OK";
        messageCancel.textContent = "No";

        messageBox.classList.add("show");

        const cleanup = (result) => {
          messageBox.classList.remove("show");
          messageOk.removeEventListener("click", onOk);
          messageCancel.removeEventListener("click", onCancel);
          messageClose.removeEventListener("click", onClose);
          document.removeEventListener("keydown", onEscape);
          resolve(result);
        };

        const onOk = () => cleanup(true);
        const onCancel = () => cleanup(false);
        const onClose = () => cleanup(false);
        const onEscape = (e) => e.key === "Escape" && cleanup(false);

        messageOk.addEventListener("click", onOk);
        messageCancel.addEventListener("click", onCancel);
        messageClose.addEventListener("click", onClose);
        document.addEventListener("keydown", onEscape);
      });
    };

    const extractNumericValue = (value) => {
      if (typeof value === "number") return value;
      if (typeof value === "string") {
        const match = value.match(/\d+\.?\d*/);
        return match ? parseFloat(match[0]) : 0;
      }
      return 0;
    };

    const calculateTotals = () => {
      let subtotal = 0;
      document.querySelectorAll(".item-total").forEach((el) => {
        subtotal += extractNumericValue(el.textContent);
      });

      const [cgst, sgst, igst, discount] = taxInputs.map(
        (id) => parseFloat(document.getElementById(id).value) || 0
      );
      const cgstAmount = (subtotal * cgst) / 100;
      const sgstAmount = (subtotal * sgst) / 100;
      const igstAmount = (subtotal * igst) / 100;
      const discountAmount = (subtotal * discount) / 100;
      const totalAmount =
        subtotal + cgstAmount + sgstAmount + igstAmount - discountAmount;

      document.getElementById("subtotalDisplay").textContent =
        `‚Çπ${subtotal.toFixed(2)}`;
      document.getElementById("cgstDisplay").textContent =
        `‚Çπ${cgstAmount.toFixed(2)}`;
      document.getElementById("sgstDisplay").textContent =
        `‚Çπ${sgstAmount.toFixed(2)}`;
      document.getElementById("igstDisplay").textContent =
        `‚Çπ${igstAmount.toFixed(2)}`;
      document.getElementById("discountDisplay").textContent =
        `‚Çπ${discountAmount.toFixed(2)}`;
      document.getElementById("totalDisplay").textContent =
        `‚Çπ${totalAmount.toFixed(2)}`;
    };

    const calculateItemTotal = (itemRow) => {
      const unitPrice =
        parseFloat(itemRow.querySelector(".item-unit-price").value) || 0;
      const quantity = extractNumericValue(
        itemRow.querySelector(".item-quantity").value
      );
      const total = unitPrice * quantity;
      itemRow.querySelector(".item-total").textContent = `‚Çπ${total.toFixed(2)}`;
      calculateTotals();
    };

    const updateAddItemButton = () => {
      const count = itemsList.children.length;
      addItemBtn.disabled = count >= MAX_ITEMS;
      addItemBtn.textContent =
        count >= MAX_ITEMS
          ? `Maximum ${MAX_ITEMS} Items`
          : `+ Add Item (${count}/${MAX_ITEMS})`;
    };

    const renumberItems = () => {
      Array.from(itemsList.children).forEach((row, index) => {
        row.querySelector(".sr-no").textContent = index + 1;
        row.dataset.itemId = index + 1;
        row.querySelectorAll("input").forEach((input) => {
          if (input.name) {
            input.name = input.name.replace(/\[\d+\]/, `[${index + 1}]`);
          }
        });
      });
      itemCounter = itemsList.children.length;
      updateAddItemButton();
    };

    const setupItemRowEventListeners = (itemRow) => {
      itemRow.querySelector(".remove-item").addEventListener("click", () => {
        itemRow.remove();
        renumberItems();
        calculateTotals();
      });
      itemRow
        .querySelectorAll(".item-unit-price, .item-quantity")
        .forEach((input) => {
          input.addEventListener("input", () => calculateItemTotal(itemRow));
        });
    };

    function addItem() {
      // Check if we've reached the maximum number of items
      const currentItemCount = document.querySelectorAll(".item-row").length;

      if (currentItemCount >= MAX_ITEMS) {
        showMessage(
          "warning",
          "Item Limit Reached",
          `You can only add a maximum of ${MAX_ITEMS} items to an invoice.`
        );
        console.log("Maximum item limit reached:", currentItemCount);
        return;
      }

      itemCounter++;
      console.log(
        "Adding item #",
        itemCounter,
        `(${currentItemCount + 1}/${MAX_ITEMS})`
      );

      const itemsList = document.getElementById("itemsList");
      const itemRow = document.createElement("div");
      itemRow.className = "item-row";
      itemRow.dataset.itemId = itemCounter; // Add data attribute for tracking
      itemRow.style.cssText = `
      display: grid !important;
      grid-template-columns: 80px 2fr 140px 100px 140px 100px !important;
      gap: 15px !important;
      padding: 15px 20px !important;
      border-bottom: 1px solid #f1f3f4 !important;
      align-items: center !important;
      background: white !important;
      transition: background-color 0.2s ease;
    `;

      itemRow.innerHTML = `
      <span class="sr-no" style="
        font-weight: 600 !important;
        font-size: 16px !important;
        color: #3498db !important;
        text-align: center !important;
        background: linear-gradient(135deg, #f8fbff 0%, #e3f2fd 100%) !important;
        padding: 8px !important;
        border-radius: 6px !important;
        border: 1px solid #e3f2fd !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
      ">${itemCounter}</span>
      <input type="text" name="items[${itemCounter}][product_description]" placeholder="Item description" required
        class="item-description"
        style="
          padding: 12px !important;
          border: 1px solid #dee2e6 !important;
          border-radius: 6px !important;
          font-size: 14px !important;
          font-weight: 500 !important;
          transition: all 0.3s ease !important;
          background: white !important;
          color: #495057 !important;
          width: 100% !important;
          box-sizing: border-box !important;
        ">
      <input type="number" name="items[${itemCounter}][unit_price]" placeholder="450.00" required step="0.01"
        class="item-unit-price"
        style="
          padding: 12px !important;
          border: 1px solid #dee2e6 !important;
          border-radius: 6px !important;
          font-size: 14px !important;
          font-weight: 500 !important;
          transition: all 0.3s ease !important;
          background: white !important;
          color: #495057 !important;
          width: 100% !important;
          box-sizing: border-box !important;
        ">
      <input type="text" name="items[${itemCounter}][quantity]" placeholder="e.g., 2, 1 PC, 5 units" required
        class="item-quantity"
        style="
          padding: 12px !important;
          border: 1px solid #dee2e6 !important;
          border-radius: 6px !important;
          font-size: 14px !important;
          font-weight: 500 !important;
          transition: all 0.3s ease !important;
          background: white !important;
          color: #495057 !important;
          width: 100% !important;
          box-sizing: border-box !important;
        ">
      <span class="item-total" style="
        font-weight: 600 !important;
        font-size: 15px !important;
        color: #27ae60 !important;
        text-align: center !important;
        padding: 12px 8px !important;
        background: linear-gradient(135deg, #f8fff9 0%, #e8f5e8 100%) !important;
        border-radius: 6px !important;
        border: 1px solid #d4edda !important;
        min-width: 100px !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
      ">‚Çπ0.00</span>
      <button type="button" class="remove-item" style="
        background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%) !important;
        color: white !important;
        border: none !important;
        padding: 10px 12px !important;
        border-radius: 6px !important;
        cursor: pointer !important;
        font-size: 14px !important;
        font-weight: 600 !important;
        transition: all 0.3s ease !important;
        box-shadow: 0 2px 4px rgba(231, 76, 60, 0.2) !important;
      ">‚úï</button>
    `;

      itemsList.appendChild(itemRow);

      // Setup event listeners for this specific row - CRITICAL: This must be called after the HTML is in the DOM
      console.log("Setting up event listeners for new item row");
      setupItemRowEventListeners(itemRow);

      // Update the Add Item button text and state
      updateAddItemButton();

      // Initial calculation
      calculateTotals();

      console.log("Item added successfully");
    }

    // const addItem = () => {
    //   if (itemsList.children.length >= MAX_ITEMS) {
    //     showMessage('warning', 'Limit Reached', `You can only add a maximum of ${MAX_ITEMS} items.`);
    //     return;
    //   }
    //   itemCounter++;
    //   const itemRow = document.createElement('div');
    //   itemRow.className = 'item-row';
    //   itemRow.dataset.itemId = itemCounter;
    //   itemRow.innerHTML = `
    //     <span class="sr-no">${itemCounter}</span>
    //     <input type="text" name="items[${itemCounter}][product_description]" placeholder="Item description" required class="item-description">
    //     <input type="number" name="items[${itemCounter}][unit_price]" placeholder="450.00" required step="0.01" class="item-unit-price">
    //     <input type="text" name="items[${itemCounter}][quantity]" placeholder="e.g., 2, 1 PC" required class="item-quantity">
    //     <span class="item-total">‚Çπ0.00</span>
    //     <button type="button" class="remove-item">‚úï</button>
    //   `;
    //   itemsList.appendChild(itemRow);
    //   setupItemRowEventListeners(itemRow);
    //   updateAddItemButton();
    //   calculateTotals();
    // };

    const fetchCustomerSuggestions = async (query) => {
      try {
        const response = await fetch(
          `/api/customers/search?q=${encodeURIComponent(query)}`
        );
        if (!response.ok) throw new Error("Failed to fetch customers");
        const customers = await response.json();
        displaySuggestions(customers, query);
      } catch (error) {
        console.error("Error fetching customer suggestions:", error);
        suggestionsContainer.style.display = "none";
      }
    };

    const displaySuggestions = (customers, query) => {
      suggestionsContainer.innerHTML = "";
      if (customers.length === 0) {
        suggestionsContainer.style.display = "none";
        return;
      }
      customers.forEach((customer) => {
        const item = document.createElement("div");
        item.className = "suggestion-item";
        item.innerHTML = customer.customer_name.replace(
          new RegExp(`(${query})`, "gi"),
          "<strong>$1</strong>"
        );
        item.addEventListener("click", () => selectCustomer(customer));
        suggestionsContainer.appendChild(item);
      });
      suggestionsContainer.style.display = "block";
    };

    const selectCustomer = (customer) => {
      document.getElementById("customer_name").value =
        customer.customer_name || "";
      document.getElementById("customer_code").value =
        customer.customer_code || "";
      document.getElementById("customer_phone").value =
        customer.customer_phone || "";
      document.getElementById("customer_email").value =
        customer.customer_email || "";
      document.getElementById("customer_address").value =
        customer.customer_address || "";
      document.getElementById("customer_gst_number").value =
        customer.customer_gst_number || "";
      suggestionsContainer.style.display = "none";
    };

    // Event Listeners
    addItemBtn.addEventListener("click", addItem);
    taxInputs.forEach((id) =>
      document.getElementById(id).addEventListener("input", calculateTotals)
    );

    customerNameInput.addEventListener("input", () => {
      clearTimeout(debounceTimer);
      const query = customerNameInput.value.trim();
      if (query.length < 3) {
        suggestionsContainer.style.display = "none";
        return;
      }
      debounceTimer = setTimeout(() => fetchCustomerSuggestions(query), 300);
    });

    document.addEventListener("click", (e) => {
      if (!customerNameInput.parentElement.contains(e.target)) {
        suggestionsContainer.style.display = "none";
      }
    });

    invoiceForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      showLoader("Creating Invoice...");

      try {
        const formData = new FormData(invoiceForm);
        const invoiceData = Object.fromEntries(formData.entries());

        const items = Array.from(itemsList.children).map((row, index) => {
          const description = row
            .querySelector('input[name*="product_description"]')
            .value.trim();
          const unitPrice =
            parseFloat(row.querySelector('input[name*="unit_price"]').value) ||
            0;
          const quantityText = row
            .querySelector('input[name*="quantity"]')
            .value.trim();
          const quantityNumeric = extractNumericValue(quantityText);
          return {
            sr_no: index + 1,
            product_name: description,
            product_description: description,
            product_category: "General",
            hsn_code: "",
            unit_price: unitPrice,
            quantity: quantityText,
            total_price: unitPrice * quantityNumeric,
            unit: "Nos",
          };
        });

        if (items.length === 0) {
          hideLoader();
          await showMessage(
            "warning",
            "Missing Items",
            "Please add at least one item."
          );
          return;
        }

        const subtotal = items.reduce((sum, item) => sum + item.total_price, 0);
        const [cgst, sgst, igst, discount] = taxInputs.map(
          (id) => parseFloat(document.getElementById(id).value) || 0
        );
        const cgstAmount = (subtotal * cgst) / 100;
        const sgstAmount = (subtotal * sgst) / 100;
        const igstAmount = (subtotal * igst) / 100;
        const discountAmount = (subtotal * discount) / 100;
        const totalTaxAmount = cgstAmount + sgstAmount + igstAmount;
        const totalAmount = subtotal + totalTaxAmount - discountAmount;

        Object.assign(invoiceData, {
          items,
          subtotal,
          cgst_amount: cgstAmount,
          sgst_amount: sgstAmount,
          igst_amount: igstAmount,
          total_tax_amount: totalTaxAmount,
          discount_amount: discountAmount,
          total_amount: totalAmount,
          bank_details: {
            bank_name: invoiceData.bank_name || "",
            account_number: invoiceData.bank_account_number || "",
            branch: invoiceData.bank_branch || "",
            ifsc_code: invoiceData.bank_ifsc_code || "",
            account_type: invoiceData.bank_account_type || "",
          },
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        });

        [
          "bank_name",
          "bank_account_number",
          "bank_branch",
          "bank_ifsc_code",
          "bank_account_type",
        ].forEach((key) => delete invoiceData[key]);
        Object.keys(invoiceData).forEach(
          (key) => key.startsWith("items[") && delete invoiceData[key]
        );

        const response = await fetch("/api/bills", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(invoiceData),
        });

        hideLoader();

        if (response.ok) {
          await showMessage(
            "success",
            "Success!",
            "Invoice created successfully!"
          );
          window.location.href = "/bills";
        } else {
          const errorText = await response.text();
          const errorData = JSON.parse(errorText || "{}");
          await showMessage(
            "error",
            "Error",
            `Failed to create invoice: ${errorData.error || "Unknown error"}`
          );
        }
      } catch (error) {
        hideLoader();
        await showMessage(
          "error",
          "Error",
          `Error creating invoice: ${error.message}`
        );
      }
    });

    // Initial setup
    document.getElementById("invoice_date").value = new Date()
      .toISOString()
      .split("T")[0];
    addItem();
    calculateTotals();
    updateAddItemButton();
  });

  function logout() {
    localStorage.removeItem(AUTH_CONFIG.SESSION_KEY);
    showMessage(
      "success",
      "Logged Out",
      "You have been logged out successfully."
    ).then(() => {
      window.location.href = AUTH_CONFIG.REDIRECT_PATHS.LOGIN;
    });
  }

  window.logout = logout;
</script>
